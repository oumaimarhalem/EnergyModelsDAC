"""
    create_transmission_mode(mode_type::Type{TransmissionMode}, corr_id::String, data, resource::EMB.Resource, power::EMB.Resource, T, multiplier::Dict)

Creates the instances for the transmission modes depending on the chosen Type.
The function is currently limited to the types `PipeSimple`, `RefDynamic`, and `RefStatic`.
"""
function create_transmission_mode(mode_type::Type{PipeSimple},
    corr_id::String,
    data,
    resource::EMB.Resource,
    power::EMB.Resource,
    T,
    multiplier::Dict,
)

    if haskey(data, "trans_max_add") && data["trans_max_add"] > 0
        inv_data = create_transmission_invest(data, multiplier, T)
    else
        inv_data = []
    end

    tmp = PipeSimple(
        Name = corr_id*"_"*data["name"],
        Inlet = resource,
        Outlet = resource,
        Consuming = power,
        Consumption_rate = time_profile(data["consumption_rate"], T),
        Trans_cap = time_profile(data["trans_capacity"], T),
        Trans_loss = time_profile(data["trans_loss"], T),
        Opex_var = time_profile(data["trans_OPEX_variable"]*multiplier["dist"], T),
        Opex_fixed = time_profile(data["trans_OPEX_fixed"]*multiplier["dist"], T),
        Data = inv_data,
    )

    return [tmp]
end

function create_transmission_mode(mode_type::Type{RefStatic},
    corr_id::String,
    data,
    resource::EMB.Resource,
    power::EMB.Resource,
    T,
    multiplier::Dict,
)
    if haskey(data, "trans_max_add") && data["trans_max_add"] > 0
        inv_data = create_transmission_invest(data, multiplier, T)
    else
        inv_data = []
    end

    tmp = EMG.RefStatic(
        corr_id*"_"*data["name"],
        resource,
        time_profile(data["trans_capacity"], T),
        time_profile(data["trans_loss"], T),
        time_profile(data["trans_OPEX_variable"]*multiplier["dist"], T),
        time_profile(data["trans_OPEX_fixed"]*multiplier["dist"], T),
        data["direction"],
        inv_data,
    )

    return [tmp]
end

function create_transmission_mode(mode_type::Type{RefDynamic},
    corr_id::String,
    data,
    resource::EMB.Resource,
    power::EMB.Resource,
    T,
    multiplier::Dict,
)

    if haskey(data, "trans_max_add") && data["trans_max_add"] > 0
        inv_data = create_transmission_invest(data, multiplier, T)
    else
        inv_data = []
    end

    tmp = EMG.RefDynamic(
        corr_id*"_"*data["name"],
        resource,
        time_profile(data["trans_capacity"], T),
        time_profile(data["trans_loss"], T),
        time_profile(data["trans_OPEX_variable"]*multiplier["dist"], T),
        time_profile(data["trans_OPEX_fixed"]*multiplier["dist"], T),
        data["direction"],
        inv_data,
    )

    return [tmp]
end



"""
    create_transmission_invest(data, multiplier)

Creates the transmission investment data based on the provided input data.
"""
function create_transmission_invest(data, multiplier, T)
    
    if haskey(data, "investment_mode")
        inv_mode = map_inv_mode(data["investment_mode"])
    else
        inv_mode = EMI.ContinuousInvestment()
    end
    inv_data = [EMI.TransInvData(
                Capex_trans     = time_profile(data["trans_CAPEX"]*multiplier["capex"]*multiplier["dist"], T), # CAPEX [€/kW]
                Capex_trans_offset = time_profile(data["trans_CAPEX_offset"]*multiplier["capex_offset"]*multiplier["dist"], T), # CAPEX [€]
                Trans_max_inst  = time_profile(data["trans_max_installed"], T),    # max installed capacity [kW]
                Trans_max_add   = time_profile(data["trans_max_add"], T),          # max_add [kW]
                Trans_min_add   = time_profile(data["trans_min_add"], T),          # min_add [kW]
                Inv_mode        = inv_mode,
                Trans_increment = time_profile(data["trans_increment"], T),
                Trans_start     = data["trans_start"],
    )]

    return inv_data
end

"""
    map_inv_mode(string)

Provides a map from string to investment mode
"""
function map_inv_mode(string)
    inv_mode = Dict(
        "SemiContinuous" => EMI.SemiContinuousInvestment(),
        "SemiContinuousOffset" => EMI.SemiContinuousOffsetInvestment(),
        "Continuous"     => EMI.ContinuousInvestment(),
    )
    return inv_mode[string]
end

"""
    map_trans_mode(string)

Provides a map from string to reference transmission mode
"""
function map_trans_mode(string)
    trans_mode = Dict(
        "El" => "power_line",
        "NG" => "natural_gas_pipe",
    )
    return trans_mode[string]
end

""" 
    map_trans_type(string)

Provides a mapping of the transmission mode type names to the technology julia
types necessary to create the correct instances when reading input data.
"""
function map_trans_type(string)
    trans_type = Dict(
        "PipeSimple" => EMG.PipeSimple,
        "RefStatic"  => EMG.RefStatic,
        "RefDynamic"  => EMG.RefDynamic,
    )
    return trans_type[string]
end

""" 
    map_trans_resource(cm)

Returns the transported resource for a given corridor_mode.
"""
function map_trans_resource(cm::EMG.TransmissionMode)
    return cm.Resource
end
function map_trans_resource(cm::EMG.PipeMode)
    return cm.Inlet
end

"""
    map_multiplier(corr_p, offshore)

Returns the multipliers used in the calculation of the pipeline investments
"""
function map_multiplier(corr_p, dist, offshore)
    
    # Initiate the dictionary
    multiplier = Dict()
    multiplier["capex"] = 1
    multiplier["capex_offset"] = 1

    # Multiplier for the distance
    if corr_p["full"]
        multiplier["dist"] = 1
    elseif haskey(corr_p, "distance")
        multiplier["dist"] = corr_p["distance"]
    else
        multiplier["dist"] = dist
    end

    # Multiplier for onshore vs. offshore
    if offshore
        multiplier["capex"] = corr_p["multiplier_CAPEX"]
        multiplier["capex_offset"] = corr_p["multiplier_CAPEX_offset"]
    end

    return multiplier
end

"""
    mode_corr(ℒᵗʳᵃⁿˢ, from::String)

Returns all transmission corridors that orginate in the area with the name `from`.
"""
function mode_corr(ℒᵗʳᵃⁿˢ, from::String)

    sub_corr = Array{EMG.Transmission}([])
    for l ∈ ℒᵗʳᵃⁿˢ
        if occursin(from, l.From.Name)
            append!(sub_corr, [l])
        end
    end

    return sub_corr
end

"""
    mode_corr(ℒᵗʳᵃⁿˢ, from::String)

Returns the transmission corridor that orginates in the area with the name `from`
and ends in the area with the name `to`.
"""
function mode_corr(ℒᵗʳᵃⁿˢ, from::String, to::String)

    sub_corr = nothing
    for l ∈ ℒᵗʳᵃⁿˢ
        if occursin(from, l.From.Name) && occursin(to, l.To.Name)
            sub_corr = l
        end
    end

    return sub_corr
end


"""
    mode_sub(𝒞ℳ, string::String)

Returns all transmission modes that include in the name the `string`.
"""
function mode_sub(𝒞ℳ, string::String)

    sub_modes = Array{EMG.TransmissionMode}([])
    for cm ∈ 𝒞ℳ
        if occursin(string, cm.Name)
            append!(sub_modes, [cm])
        end
    end

    return sub_modes
end

"""
    mode_sub(𝒞ℳ, string_array::Array{String})

Returns all transmission modes that include in the name all entries of
the array `string_array`.
"""
function mode_sub(𝒞ℳ, string_array::Array{String})

    sub_modes = Array{EMG.TransmissionMode}([])
    for cm ∈ 𝒞ℳ
        if all(occursin(string, cm.Name) for string ∈ string_array)
            append!(sub_modes, [cm])
        end
    end

    return sub_modes
end

"""
    remove_empty_keys(dict::Dict{String, Union{Array, Matrix}}})

Removes all key-value pairs that correspond to investments. The additional parameter
`atol` correspond to the absolute value as tolerance
"""
function remove_empty_values(dict::Dict{String, Array}; atol=1e-8)
    
    for key ∈ keys(dict)
        if  any(abs.(dict[key]) .> atol)
            nothing
        else
            delete!(dict, key)
        end
    end
    return dict
end
function remove_empty_values(dict::Dict{String, Matrix}; atol=1e-8)
    
    for key ∈ keys(dict)
        if  any(abs.(dict[key]) .> atol)
            nothing
        else
            delete!(dict, key)
        end
    end
    return dict
end

function remove_empty_values(dict::Dict{String,<:Dict}; atol=1e-8)
    
    for key ∈ keys(dict)
        dict[key] = remove_empty_values(dict[key]; atol=atol)
        if isempty(dict[key])
            delete!(dict, key)
        end
    end
    return dict
end
