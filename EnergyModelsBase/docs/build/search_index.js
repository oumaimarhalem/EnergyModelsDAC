var documenterSearchIndex = {"docs":
[{"location":"library/internals/optimization-variables/#optimization_variables","page":"Optimization variables","title":"Optimization variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/#General-variables","page":"Optimization variables","title":"General variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"All nodes n (except Availability-nodes) have the following the variables","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttopex_varn t_textttinv: Variable operational costs,\ntextttopex_fixedn t_textttinv: Fixed operational costs, and\ntextttemissions_noden t p_textttem:  Emissions of the node","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"created at at strategic period t_textttinv or operational period t. p_textttem defines the different ResourceEmit resources that are introduced in the case structure.","category":"page"},{"location":"library/internals/optimization-variables/#Flow-variables","page":"Optimization variables","title":"Flow variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Flow variables correspond to the input and output to the technology node. The following flow variables are defined for the nodes:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttflow_inn t p measures the flow rate of resource p into node n at operational period t. It is created for subtypes of the types Network and Sink based on the field Input in the struct.\ntextttflow_outn t p measures the flow rate of resource p out of node n at operational period t. It is created for created for subtypes of the types Source and Network based on the field Output in the struct.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The flow is always given for a single hour. This means that the total quantity that flows into a node n during the operational period t is found by ","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"m[:flow_in][n, t, p] * t.duration","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The multiplication then leads to an energy/mass quantity in stead of an energy/mass flow.","category":"page"},{"location":"library/internals/optimization-variables/#Capacity-variables","page":"Optimization variables","title":"Capacity variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The capacity variables are also created for all nodes except for (Availability nodes). They differentiate between Storage nodes and other node types.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The following capacity variables are created for node types different than Storage:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttcap_usen t: Capacity usage of node n at operational period t. This value is in absolute terms and not relative.\ntextttcap_instn t: Installed capacity of node n at operational period t.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The capacity variables for Storage nodes differentiate between storage capacity (stored energy in the Storage node) or rate of storage (storage rate of a Storage node). This leads then to the following variables:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttstor_leveln t: Absolute level of energy/mass stored in a Storage node n at operational period t,\ntextttstor_cap_instn t: Installed storage capacity in a Storage node n at operational period t,\ntextttstor_rate_usen t: Usage of the rate of a Storage node n at operational period t, and\ntextttstor_rate_instn t: Maximum available rate of a Storage node n at operational period t.","category":"page"},{"location":"library/internals/optimization-variables/#Sink-variables","page":"Optimization variables","title":"Sink variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"Sink nodes are somehow different to the other nodes as they have additional variables associated with them. A key point here is to keep the overall mass balance intact. These variables are:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttsink_surplusn t: Surplus of energy/mass to Sink n at operational period t, and\ntextttsink_deficitn t: deficit of energy/mass to Sink n at operational period t.","category":"page"},{"location":"library/internals/optimization-variables/#Other-variables","page":"Optimization variables","title":"Other variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The following variables are not associated with any nodes:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttemissions_totalt p_textttem: Total emissions of ResourceEmit p_textttem in operational period t, and\ntextttemissions_strategict_textttinv p_textttem: Total emissions of ResourceEmit p_textttem in strategic period t_textttinv.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"These variables are introduced to calculate the total emissions both within an operational and a strategic period.","category":"page"},{"location":"manual/simple-example/#Examples","page":"Example","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"For the content of the individual examples, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Example","title":"The package is installed with ]Â add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the Clean Export Julia packages repository. Then run ","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/some/directory/ $ julia           # Starts the Julia REPL\njulia> ]                            # Enter Pkg mode \npkg> add EnergyModelsBase    # Install the package EnergyModelsBase to the current environment.","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsBase\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsBase), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"sink_source.jl\"))","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"The second example can be run using ","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsBase\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsBase), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"network.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Example","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the internal Clean Export Julia package registry. The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/../energymodelsrenewableproducers.jl/examples $ julia sink_source.jl","category":"page"},{"location":"how-to/create-new-node/#create_new_node","page":"Create a new node","title":"Creating a new node","text":"","category":"section"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"warning: Unfinished how-to\nThis page is not finished.","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"The energy system model is based on the JuMP optimization framework, so some basic knowledge on this Julia package is needed to implement a new technology node.","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"To create a new technology node named NewTechNode, we need toImplement a new struct (composite type), that is a subtypes of Node, Source, Sink, etc. Here, a central choice is to decide on what abstract node type to subtye.\nOptional: implement the method\nvariables_node(m, ð©Ë¢áµáµ::Vector{<:NewTechNode}, ð¯, modeltype::EnergyModel)\nImplementi this method if you want to create additional optimization variables for the new node. See  how to create JuMP variables in the JuMP documentation.\nImplement the method\ncreate_node(m, n::NewTechNode, ð¯, ð«, modeltype::EnergyModel)\nIn this method the constraints for the new node are created. See how to create JuMP constraints. You can also use the availabe constraint functions","category":"page"},{"location":"how-to/create-new-node/#howto_create_node_subtype","page":"Create a new node","title":"What abstract node type should you subtype?","text":"","category":"section"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"The choice of node supertype depends on what optimization variables you need for the constraints describing the functionality of the new node.","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"A new node is defined as a composite type (struct) and subtype of one of the standard node types,","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"Source\nNetwork\nSink","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"Furthermore, we have the types","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"Availability <: Network\nStorage <: Network","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"which correspond to a routing node (Availability) and a storage node (Storage).","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"The chosen parent type of the NewNodeType node decides what optimization variables are created for use by default. The main difference between the individual parent types is whether they have only an energy/mass output (Source), input and output (Network), or input (Sink).","category":"page"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"You can find the created default optimization variables in OptimizationVariables*.","category":"page"},{"location":"how-to/create-new-node/#Example","page":"Create a new node","title":"Example","text":"","category":"section"},{"location":"how-to/create-new-node/","page":"Create a new node","title":"Create a new node","text":"As an example, you can check out how Renewable Producers introduces two new technology types, a Sink and a Storage.","category":"page"},{"location":"library/internals/constraint-functions/#constraint_functions","page":"Constraint functions","title":"Constraint functions","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The package provides standard constraint functions that can be use for new developed nodes.","category":"page"},{"location":"library/internals/constraint-functions/#Capacity-constraints","page":"Constraint functions","title":"Capacity constraints","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraint on the usage of the capacity of a technology node n. It is implemented for Node, Storage, and Sink types. Within this function, the function","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity_installed(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"is called to limit the variable textttcap_inst (or textttstor_cap_inst and textttstor_rate_inst respectively for Storage nodes) of a technology node n. This functions is also used to subsequently dispatch on model type for the introduction of investments.","category":"page"},{"location":"library/internals/constraint-functions/#Flow-constraints","page":"Constraint functions","title":"Flow constraints","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_flow_in(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the required inflow to a node n for a given capacity usage. It is implemented for Node (using textttcap_usen t) and Storage (using textttstor_cap_usen t and textttstor_rate_usen t) types.","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_flow_out(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the required inflow to a node n for a given capacity usage. It is implemented for Node types using textttcap_usen t but not used for the Storage subtypes introduced in the model. These constraints are directly specified within the respective create_node function.","category":"page"},{"location":"library/internals/constraint-functions/#Operational-cost-constraints","page":"Constraint functions","title":"Operational cost constraints","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_fixed(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the fixed operational costs of a technology node n. It is implemented for Node, Storage, and Sink types.","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_var(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the variable operational costs of a technology node n. It is implemented for Node, Storage, RefStorageEmissions, and Sink types.","category":"page"},{"location":"manual/quick-start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nAdd the CleanExport internal Julia registry:\n] registry add git@gitlab.sintef.no:clean_export/registrycleanexport.git\nAdd the SINTEF internal Julia registry:\n] registry add git@gitlab.sintef.no:julia-one-sintef/onesintef.git\nInstall the base package EnergyModelsBase.jl and the time package TimeStruct.jl, by running:\n] add EnergyModelsBase\n] add TimeStruct\nThis will fetch the packages from the CleanExport package and OneSINTEF registries.","category":"page"},{"location":"manual/philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"manual/philosophy/#General-design-philosophy","page":"Philosophy","title":"General design philosophy","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"One key aim in the development of EnergyModelsBase was to create an energy system model that","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"offers maximum flexibility with respect to the description of technologies,\nis simple to extend with additional features without requiring changes in the core structure, and\nis built simple so that the thought process for understanding the model is straight forward.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Julia as a programming language offers the  flexibility required in points 1 and 2 through the concept of multiple dispatch. Point 3 is achieved through a one direction flow in function calls, that is that we limit the number of required files and function calls for the individual technology constraint creations, and meaningfull names to the individual functions. ","category":"page"},{"location":"manual/philosophy/#Description-of-technologies","page":"Philosophy","title":"Description of technologies","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"The package utilizes different types that represent components in an energy system. These types can be summarized as:","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Source types have only an ouput to the system. Practical examples are solar PV, wind power, or available resources.\nNetwork types have both an input and an ouput. Practical examples are next to all technologies in an energy system, like e.g., a natural gas reforming plant with CCS (input: natural gas and electricity, output: hydrogen and CO<sub>2</sub>) or an electrolyser (input: electricity, output: hydrogen).\nSink types have only an input from the system. They correspond in general to an energy/mass demand.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"In addition, there are two types that are subtypes of Network:","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Availability types are routing types. They guarantee the energy/mass balance of all connected inputs/outputs.\nStorage types are a special subtype as they include different variables.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"These types are connected using links that transport the energy/mass.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"New technologies can be introduced by defining a new composite type for the technology. You can find a description on how you can create a new node on the page Creating a new node.","category":"page"},{"location":"manual/philosophy/#Extensions-to-the-model","page":"Philosophy","title":"Extensions to the model","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"There are in general four ways to extend the model:","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Introducing new technology descriptions as described in Creating a new node,\nCall of the create_model function with subsequent functionc alls,\nDispatching on the type EnergyModel, and\nUse the field Data in the individual composite types.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Calling create_model within a new function allows the introduction of entirely new functions. This approach is chosen in EnergyModelsGeography.jl although it still uses dispatch on individual technology nodes.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"Dispatching on the type EnergyModel allows for adding methods to all functions that have modeltype included in the call. This is done in the package EnergyModelsInvestments.jl where investments are added to the model through introducting the abstract type AbstractInvestmentModel. It can be problematic when one also wants to use investments. In addition, care has to be taken with respect to method amibiguity when dispatching on the type EnergyModel.","category":"page"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"The last approach is used already in the package EnergyModelsInvestments.jl through the introduction of the abstract type InvestmentData. The Array{Data} field allows us flexibility with respect to providing additional data to the existing nodes. It is planned to change the implementation so that it is even easier to utilize thhis approach for model extension.","category":"page"},{"location":"manual/nodes/#Nodes","page":"Nodes","title":"Nodes","text":"","category":"section"},{"location":"manual/nodes/","page":"Nodes","title":"Nodes","text":"julia> using EnergyModelsBase\njulia> const EMB = EnergyModelsBase \njulia> using AbstractTrees\njulia> AbstractTrees.children(x::Type) = subtypes(x)\n\njulia> print_tree(EMB.Node)","category":"page"},{"location":"manual/nodes/","page":"Nodes","title":"Nodes","text":"Node\nââ Network\nâ  ââ Availability\nâ  â  ââ GenAvailability\nâ  ââ RefNetwork\nâ  ââ RefNetworkEmissions\nâ  ââ Storage\nâ     ââ RefStorage\nâ     ââ RefStorageEmissions\nââ Sink\nâ  ââ RefSink\nââ Source\n   ââ RefSource","category":"page"},{"location":"manual/nodes/","page":"Nodes","title":"Nodes","text":"The leaf nodes of the above type hierarchy tree are structs, while the inner vertices are abstract types. The individual nodes and their fields are explained in the public library.","category":"page"},{"location":"library/internals/reference/#Internals","page":"Reference","title":"Internals","text":"","category":"section"},{"location":"library/internals/reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"library/internals/reference/#Types","page":"Reference","title":"Types","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsBase]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"library/internals/reference/#EnergyModelsBase.Formulation","page":"Reference","title":"EnergyModelsBase.Formulation","text":"Declaration of the general type for formulation of links.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/reference/#EnergyModelsBase.Node","page":"Reference","title":"EnergyModelsBase.Node","text":"Declaration of the general type of node.\n\n\n\n\n\n","category":"type"},{"location":"library/internals/reference/#Methods","page":"Reference","title":"Methods","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsBase]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"library/internals/reference/#EnergyModelsBase.check_data-Tuple{Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.check_data","text":"check_data(case, modeltype)\n\nCheck if the case data is consistent. Use the @assertorlog macro when testing. Currently only checking node data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.check_node-Tuple{EnergyModelsBase.Node, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.check_node","text":"check_node(n, ð¯, modeltype::EnergyModel)\n\nCheck that the fields of a Node n corresponds to required structure.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.check_profile_field-Tuple{Any, TimeStruct.FixedProfile, Any}","page":"Reference","title":"EnergyModelsBase.check_profile_field","text":"check_profile_field(fieldname, value::TimeProfile, ð¯)\n\nCheck that an individual TimeProfile corresponds to the time structure ð¯.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.check_time_structure-Tuple{EnergyModelsBase.Node, Any}","page":"Reference","title":"EnergyModelsBase.check_time_structure","text":"check_time_structure(n::Node, ð¯)\n\nCheck that all fields of a Node that are of type TimeProfile correspond to the time structure ð¯.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.collect_types-Tuple{Any}","page":"Reference","title":"EnergyModelsBase.collect_types","text":"collect_types(types_list)\n\nReturn a Dict of all the give types_list and their supertypes. The keys in the dictionary are the types, and their corresponding value is the number in the type hierarchy.\n\nE.g., Node is at the top and will thus have the value 1. Types just below Node will have value 2, and so on.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.compile_logs-Tuple{Any, Any}","page":"Reference","title":"EnergyModelsBase.compile_logs","text":"compile_logs(case, log_by_element)\n\nSimple method for showing all log messages.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_capacity-Tuple{Any, EnergyModelsBase.Node, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::Node, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a generic Node. This function serves as fallback option if no other function is specified for a Node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_capacity-Tuple{Any, Sink, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::Sink, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum capacity of a generic Sink. This function serves as fallback option if no other function is specified for a Sink.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_capacity-Tuple{Any, Storage, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_capacity","text":"constraints_capacity(m, n::Storage, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the maximum level of a generic Storage. This function serves as fallback option if no other function is specified for a Storage.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_capacity_installed-Tuple{Any, EnergyModelsBase.Node, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_capacity_installed","text":"constraints_capacity_installed(m, n, ð¯::TimeStructure, modeltype::EnergyModel)\n\nIn general, it is prefered to have the capacity as a function of a variable given with a value of 1 in the field n.Cap.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_emissions-Tuple{Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_emissions","text":"constraints_emissions(m, ð©, ð¯, ð«, modeltype::EnergyModel)\n\nCreate constraints for the emissions accounting for both operational and strategic periods.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_flow_in-Tuple{Any, EnergyModelsBase.Node, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the inlet flow to a generic Node. This function serves as fallback option if no other function is specified for a Node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_flow_in-Tuple{Any, Storage, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_flow_in","text":"constraints_flow_in(m, n::Storage, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the inlet flow to a generic Storage. This function serves as fallback option if no other function is specified for a Storage.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_flow_out-Tuple{Any, EnergyModelsBase.Node, TimeStruct.TimeStructure, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_flow_out","text":"constraints_flow_out(m, n, ð¯::TimeStructure, modeltype::EnergyModel)\n\nFunction for creating the constraint on the outlet flow from a generic Node. This function serves as fallback option if no other function is specified for a Node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_links-Tuple{Any, Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_links","text":"constraints_links(m, ð©, ð¯, ð«, â, modeltype::EnergyModel)\n\nCall the function create_link for link formulation\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_node-Tuple{Any, Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_node","text":"constraints_node(m, ð©, ð¯, ð«, â, modeltype::EnergyModel)\n\nCreate link constraints for each n â ð© depending on its type and calling the function create_node(m, n, ð¯, ð«) for the individual node constraints.\n\nCreate constraints for fixed OPEX.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_fixed-Tuple{Any, EnergyModelsBase.Node, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_fixed","text":"constraints_opex_fixed(m, n::Node, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the fixed OPEX of a generic Node. This function serves as fallback option if no other function is specified for a Node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_fixed-Tuple{Any, Sink, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_fixed","text":"constraints_opex_fixed(m, n::Sink, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the fixed OPEX of a generic Sink. This function serves as fallback option if no other function is specified for a Sink.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_fixed-Tuple{Any, Storage, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_fixed","text":"constraints_opex_fixed(m, n::Storage, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the fixed OPEX of a generic Storage. This function serves as fallback option if no other function is specified for a Storage.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_var-Tuple{Any, EnergyModelsBase.Node, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_var","text":"constraints_opex_var(m, n::Node, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the variable OPEX of a generic Node. This function serves as fallback option if no other function is specified for a Node.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_var-Tuple{Any, RefStorageEmissions, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_var","text":"constraints_opex_var(m, n::RefStorageEmissions, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the variable OPEX of a RefStorageEmissions.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_var-Tuple{Any, Sink, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_var","text":"constraints_opex_var(m, n::Sink, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the variable OPEX of a generic Sink. This function serves as fallback option if no other function is specified for a Sink.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.constraints_opex_var-Tuple{Any, Storage, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.constraints_opex_var","text":"constraints_opex_var(m, n::Storage, ð¯á´µâ¿áµ, modeltype::EnergyModel)\n\nFunction for creating the constraint on the variable OPEX of a generic Storage. This function serves as fallback option if no other function is specified for a Storage.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_link-Tuple{Any, Any, Any, Any, EnergyModelsBase.Formulation}","page":"Reference","title":"EnergyModelsBase.create_link","text":"create_link(m, ð¯, ð«, l, formulation::Formulation)\n\nSet the constraints for a simple Link (input = output). Can serve as fallback option for all unspecified subtypes of Link.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, Availability, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::Availability, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a Availability. Can serve as fallback option for all unspecified subtypes of Availability.\n\nAvailability nodes can be seen as routing nodes. It is not necessary to have more than one available node except if one wants to include as well transport between different availability nodes with associated costs (not implemented at the moment).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, Network, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::Network, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a Network. Can serve as fallback option for all unspecified subtypes of Network.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, RefNetworkEmissions, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::RefNetworkEmissions, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a RefNetworkEmissions. This node is an extension of the RefNetwork node including both process emissions and the potential for CO2 capture.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, RefStorageEmissions, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::RefStorageEmissions, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a RefStorageEmissions. This storage is different to the standard storage as initial and final value differ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, Sink, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::Sink, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a Sink. Can serve as fallback option for all unspecified subtypes of Sink.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, Source, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::Source, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a Source. Can serve as fallback option for all unspecified subtypes of Source.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, Storage, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"create_node(m, n::Storage, ð¯, ð«, modeltype::EnergyModel)\n\nSet all constraints for a Storage. Can serve as fallback option for all unspecified subtypes of Storage.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.link_res-Tuple{Link}","page":"Reference","title":"EnergyModelsBase.link_res","text":"link_res(l::Link)\n\nReturn the resources transported for a given link l.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.link_sub-Tuple{Any, EnergyModelsBase.Node}","page":"Reference","title":"EnergyModelsBase.link_sub","text":"link_sub(â, n::Node)\n\nReturn connected links for a given node  ::Array{Link}.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.node_not_av-Tuple{Array{EnergyModelsBase.Node}}","page":"Reference","title":"EnergyModelsBase.node_not_av","text":"node_not_av(ð©::Array{Node})\n\nReturn nodes that are not availability nodes for a given Array ::Array{Node}.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.node_not_sink-Tuple{Array{EnergyModelsBase.Node}}","page":"Reference","title":"EnergyModelsBase.node_not_sink","text":"node_not_sink(ð©::Array{Node})\n\nReturn nodes that are not Sink nodes for a given Array ::Array{Node}.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.node_not_sub","page":"Reference","title":"EnergyModelsBase.node_not_sub","text":"node_not_sub(ð©::Array{Node}, sub)\n\nReturn nodes that are not of type sub for a given Array ::Array{Node}.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/reference/#EnergyModelsBase.node_sub","page":"Reference","title":"EnergyModelsBase.node_sub","text":"node_sub(ð©::Array{Node}, sub/subs)\n\nReturn nodes that are of type sub/subs for a given Array ::Array{Node}.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/reference/#EnergyModelsBase.objective-Tuple{Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.objective","text":"objective(m, ð©, ð¯, ð«, modeltype::EnergyModel)\n\nCreate the objective for the optimization problem for a given modeltype. \n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.res_not-Tuple{Any, Resource}","page":"Reference","title":"EnergyModelsBase.res_not","text":"res_not(ð©::Array{Resource}, res_inst)\n\nReturn all resources that are not res_inst for a given Array ::Array{Resource}.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.res_sub","page":"Reference","title":"EnergyModelsBase.res_sub","text":"res_sub(ð«::Array{Resource}, sub = ResourceEmit)\n\nReturn resources that are of type sub for a given Array ::Array{Resource}.\n\n\n\n\n\n","category":"function"},{"location":"library/internals/reference/#EnergyModelsBase.sort_types-Tuple{Dict}","page":"Reference","title":"EnergyModelsBase.sort_types","text":"sort_types(types_list::Dict)\n\nSort the result of collect_types and return a vector where a supertype comes before all its subtypes.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_capacity-Tuple{Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_capacity","text":"variables_capacity(m, ð©, ð¯, modeltype::EnergyModel)\n\nCreation of different capacity variables for nodes ð©â¿áµáµ that are neither Storage nor Availability nodes. These variables are:\n\n:cap_use - use of a technology node in each operational period\n:cap_inst - installed capacity in each operational period in terms of either :flow_in\n\nor :flow_out (depending on node n â ð©)\n\nCreation of different storage variables for Storage nodes ð©Ë¢áµáµÊ³. These variables are:\n\n:stor_level - storage level in each operational period\n:stor_rate_use - change of level in each operational period\n:stor_cap_inst - installed capacity for storage in each operational period, constrained\n\nin the operational case to n.Stor_cap \n\n:stor_rate_inst - installed rate for storage, e.g. power in each operational period,\n\nconstrained in the operational case to n.Rate_cap \n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_capex-Tuple{Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_capex","text":"variables_capex(m, ð©, ð¯, ð«, modeltype::EnergyModel)\n\nDeclaration of the CAPEX variables of the model for each investment period ð¯á´µâ¿áµ â ð¯.  Empty for operational models but required for multiple dispatch in investment model.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_emission-Tuple{Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_emission","text":"variables_emission(m, ð©, ð¯, ð«, modeltype::EnergyModel)\n\nDeclaration of emission variables per technical node n â ð© and emission resource ð«áµáµ â ð«. These are differentied in:\n\n:emissions_node - emissions of a node in an operational period,\n:emissions_total - total emissions in an operational period, and\n:emissions_strategic - total strategic emissions, constrained to an upper limit based on \n\nmodeltype.Emission_limit.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_flow-Tuple{Any, Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_flow","text":"variables_flow(m, ð©, ð¯, ð«, â, modeltype::EnergyModel)\n\nDeclaration of the individual input (:flow_in) and output (:flow_out) flowrates for each technological node n â ð© and link l â â (:link_in and :link_out).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_node-Tuple{Any, Vector{<:EnergyModelsBase.Node}, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_node","text":"\"     variables_node(m, ð©Ë¢áµáµ::Vector{<:Node}, ð¯, modeltype::EnergyModel)\n\nDefault fallback method when no function is defined for a node type.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_node-Tuple{Any, Vector{<:Sink}, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_node","text":"variables_node(m, ð©Ë¢â±â¿áµ::Vector{<:Sink}, ð¯, modeltype::EnergyModel)\n\nDeclaration of both surplus (:sink_surplus) and deficit (:sink_deficit) variables for Sink nodes ð©Ë¢â±â¿áµ to quantify when there is too much or too little energy for satisfying the demand.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_nodes-Tuple{Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_nodes","text":"variables_nodes(m, ð©, ð¯, modeltype::EnergyModel)\n\nLoop through all node types and create variables specific to each type. This is done by calling the method variables_node on all nodes of each type.\n\nThe node type representing the widest cathegory will be called first. That is,  variables_node will be called on a Nodebefore it is called andNetwork`-nodes. be called before \n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsBase.variables_opex-Tuple{Any, Any, Any, Any, EnergyModel}","page":"Reference","title":"EnergyModelsBase.variables_opex","text":"variables_opex(m, ð©, ð¯, ð«, modeltype::EnergyModel)\n\nDeclaration of the OPEX variables (:opex_var and :opex_fixed) of the model for each investment period ð¯á´µâ¿áµ â ð¯. Variable OPEX can be non negative to account for revenue streams.\n\n\n\n\n\n","category":"method"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Version-0.5.1-(2023-06-16)","page":"Release notes","title":"Version 0.5.1 (2023-06-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the documentation based on the new format","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-06-01)","page":"Release notes","title":"Version 0.5.0 (2023-06-01)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct.jl","page":"Release notes","title":"Switch to TimeStruct.jl","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.jl\nTimeStruct.jl is implemented with only the basis features that were available in TimesStructures.jl. This implies that neither operational nor strategic uncertainty is included in the model","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-05-30)","page":"Release notes","title":"Version 0.4.0 (2023-05-30)","text":"","category":"section"},{"location":"manual/NEWS/#Additional-input-data-changes","page":"Release notes","title":"Additional input data changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed the structure in which the extra field Data is included in the nodes\nIt is changed from Dict{String, Data} to Array{Data}","category":"page"},{"location":"manual/NEWS/#Version-0.3.3-(2023-04-26)","page":"Release notes","title":"Version 0.3.3 (2023-04-26)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed where storage variables are declared to avoid potential method ambiguity through new storage variables when using EnergyModelsInvestments","category":"page"},{"location":"manual/NEWS/#Version-0.3.2-(2023-02-07)","page":"Release notes","title":"Version 0.3.2 (2023-02-07)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Generalized the function names for identifying and sorting the individual introduced types.","category":"page"},{"location":"manual/NEWS/#Version-0.3.1-(2023-02-03)","page":"Release notes","title":"Version 0.3.1 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Take the examples out to the directory examples","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2023-02-02)","page":"Release notes","title":"Version 0.3.0 (2023-02-02)","text":"","category":"section"},{"location":"manual/NEWS/#Fields-of-reference-types-and-new-types","page":"Release notes","title":"Fields of reference types and new types","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Removal of all process emissions and CO2 capture from reference types to avoid having to include them as well","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"in all subtypes defined later to keep the fallback option. This requires in the future to ***remove*** CO2 as output when using CO2 capture as it was previously the case. The original types are retained so that they can still be used","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduction of a type RefStorageEmissions to account for a storage unit that can be used for storing ResourceEmit","category":"page"},{"location":"manual/NEWS/#Introduction-of-functions-for-constraints-generation","page":"Release notes","title":"Introduction of functions for constraints generation","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Substitution of variable and fixed OPEX calculations as well as capacity and flow constraints through functions which utilize dispatching on node types","category":"page"},{"location":"manual/NEWS/#Redefinition-of-introduction-of-global-data","page":"Release notes","title":"Redefinition of introduction of global data","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Removal of the type AbstractGlobalData and all subtypes and substitution through EnergyModel and the corresponding subtypes\nAddition of the field CO2_instance in the type OperationalModel\nAddition of ModelType to the function create_node to be able to use different ids for the CO2 resource","category":"page"},{"location":"manual/NEWS/#Additional-changes","page":"Release notes","title":"Additional changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Redefining CO2Int in fields of type Resource to CO2_int to be consistent with the other types\nMinor changes in constraint description that do not break previous code\nChanged the input to the function variables_node to simplify the generation of variables for a specific node type","category":"page"},{"location":"manual/NEWS/#Version-0.2.7-(2022-12-12)","page":"Release notes","title":"Version 0.2.7 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renamed packages to use common prefix\nUpdated README","category":"page"},{"location":"manual/NEWS/#Version-0.2.4-(2022-09-07)","page":"Release notes","title":"Version 0.2.4 (2022-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Feature-update-and-changes-in-export","page":"Release notes","title":"Feature update and changes in export","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Inclusion of time dependent profiles for surplus and deficit of sinks\nInclusion of parameter checks for surplus and deficit of sinks\nExport of all reference nodes for easier identification of the nodes\nChanges in the test structure with improved testing of variables\nChanges in doc strings for individual functions/types","category":"page"},{"location":"manual/NEWS/#Version-0.2.3-(2021-09-07)","page":"Release notes","title":"Version 0.2.3 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2021-08-20)","page":"Release notes","title":"Version 0.2.2 (2021-08-20)","text":"","category":"section"},{"location":"manual/NEWS/#Feature-updates","page":"Release notes","title":"Feature updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Change of Availability to abstract type and introduction of GenAvailability as composite type to be able to use multiple dispatch on the availability nodes\nInclusion of the entry fixed OPEX to the node composite types\nInclusion of the entry data to the node composite types to provide input required for certain additional packages like investments\nNew function for checks of node data so that we have an a priori check of all model data","category":"page"},{"location":"manual/NEWS/#Changes-in-naming-2","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduce the optimization variables storlevel and stormax for storages, and use these instead of capusage and capmax for the constraints on Storage.\nUse the new variable cap_storage in Storage nodes for the installed storage capacity.","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2021-04-22)","page":"Release notes","title":"Version 0.2.1 (2021-04-22)","text":"","category":"section"},{"location":"manual/NEWS/#Feature-updates-2","page":"Release notes","title":"Feature updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Reduction in variables through introduction of input/output (#2)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"dictionaries for all nodes that only include necessary components","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Improvement related to emissions to avoid wrong accounting when other emission carriers than CO2 are present (#2)\nLink resources generated automatically from input (#2)","category":"page"},{"location":"manual/NEWS/#Changes-in-naming-3","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Removal of prefix \"create\" before \"constraints\" and \"variables\"\n\"createmodule\" switched to \"createnode\"","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2021-04-19)","page":"Release notes","title":"Version 0.2.0 (2021-04-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Inclusion of abstract type and structures for both resources and (#1)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"differentiation in nodes","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Development of new functions for the given data structures to obtain (#1)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"subsets of the system","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Development of the core structure in model.jl for allowing variations (#1)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"in the different nodes","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Implementation of fallback solutions for source, network, storage,","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"and sink (#1)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Inclusion of availability node for easier distribution of energy in a","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"single geographical node and transfer from one geographical node to the next (#1)","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Providing a test case that can be used for playing around with the simple","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"system (#1)","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-03-19)","page":"Release notes","title":"Version 0.1.0 (2021-03-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial (skeleton) version","category":"page"},{"location":"#EnergyModelsBase.jl","page":"Home","title":"EnergyModelsBase.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsBase","category":"page"},{"location":"#EnergyModelsBase","page":"Home","title":"EnergyModelsBase","text":"Main module for EnergyModelsBase.jl.\n\nThis module provides the framework for building energy system models.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"CleanExport is an operational, multi nodeal energy system model, written in Julia. The model is based on the JuMP optimization framework. It is a multi carrier energy model, where the definition of the resources are fully up to the user of the model. One of the primary design goals was to develop a model that can eaily be extended with new functionality without the need to understand and remember every variable and constraint in the model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"For running a basic energy system model, only the base technology package EnergyModelsBase.jl and the time structure package TimeStruct.jl is needed.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main package provides simple descriptions for energy sources, sinks, conversion, and storage units. It corresponds to an operational model without geographic features.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Other packages can the optionally be added if specific functionality or technology nodes are needed. The most important packages are","category":"page"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsGeography.jl:  this package makes it possible to easily extend your energy model different  geographic areas, where transmission can be set to allow for the transport of  resources between the different areas.\nEnergyModelsInvestments.jl:  this package implements functionality for investments, where the length of the  investment periods are fully flexible and is decided by setting the time  structure.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Packages implementing technology specific nodes:","category":"page"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsCO2.jl: implementing a CO2-storage node.\nEnergyModelsHydrogen.jl: implementing an electrolyser node.\nEnergyModelsRenewableProducers.jl: implements NonDisRES for intermittent renewable energy sources and RegHydroStor modeling a regulated hydro storage.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/philosophy.md\",\n    \"manual/nodes.md\"\n    \"manual/simple-example.md\"\n]","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/optimization-variables.md\",\n    \"library/internals/constraint-functions.md\",\n    \"library/internals/reference.md\",\n]","category":"page"},{"location":"library/public/#sec_lib_public","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#Resource","page":"Public","title":"Resource","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Resource\nResourceCarrier\nResourceEmit","category":"page"},{"location":"library/public/#EnergyModelsBase.Resource","page":"Public","title":"EnergyModelsBase.Resource","text":"Resources that can be transported and converted. \n\nFields\n\nid is the name/identifyer of the resource.\nCO2_int::T is the the CO2 intensity.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.ResourceCarrier","page":"Public","title":"EnergyModelsBase.ResourceCarrier","text":"General resources.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.ResourceEmit","page":"Public","title":"EnergyModelsBase.ResourceEmit","text":"Resources that can can be emitted (e.g., CO2, CH4, NOx).\n\nFields\n\nid is the name/identifyer of the resource.\nCO2_int::T is the the CO2 intensity.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Nodes","page":"Public","title":"Nodes","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Node\nSource\nNetwork\nSink\nStorage\nAvailability","category":"page"},{"location":"library/public/#EnergyModelsBase.Source","page":"Public","title":"EnergyModelsBase.Source","text":"Source node with only output.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Network","page":"Public","title":"EnergyModelsBase.Network","text":"Network node with both input and output.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Sink","page":"Public","title":"EnergyModelsBase.Sink","text":"Sink node with only input.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Storage","page":"Public","title":"EnergyModelsBase.Storage","text":"Storage node with level.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Availability","page":"Public","title":"EnergyModelsBase.Availability","text":"Availability node as routing node.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Reference-nodes","page":"Public","title":"Reference nodes","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"RefSource\nRefNetwork\nRefNetworkEmissions\nRefSink\nRefStorage\nRefStorageEmissions","category":"page"},{"location":"library/public/#EnergyModelsBase.RefSource","page":"Public","title":"EnergyModelsBase.RefSource","text":"A reference Source node.\n\nProcess emissions can be included, but if the field is not added, then no process emissions are assumed through the usage of a constructor.\n\nFields\n\nid is the name/identifier of the node.\nCap::TimeProfile is the installed capacity.\nOpex_var::TimeProfile is the variational operational costs per energy unit produced.\nOpex_fixed::TimeProfile is the fixed operational costs.\nOutput::Dict{Resource, Real} are the generated Resources with conversion value Real..\nData::Array{Data} is the additional data (e.g. for investments).\nEmissions::Dict{ResourceEmit, Real}: emissions per energy unit produced.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.RefNetwork","page":"Public","title":"EnergyModelsBase.RefNetwork","text":"A reference Network node.\n\nFields\n\nid is the name/identifier of the node.\nCap::TimeProfile is the installed capacity.\nOpex_var::TimeProfile is the variational operational costs per energy unit produced.\nOpex_fixed::TimeProfile is the fixed operational costs.\nInput::Dict{Resource, Real} are the input Resources with conversion value Real.\nOutput::Dict{Resource, Real} are the generated Resources with conversion value Real.\nData::Array{Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.RefNetworkEmissions","page":"Public","title":"EnergyModelsBase.RefNetworkEmissions","text":"A reference Network node with process emissions.\n\nFields\n\nid is the name/identifier of the node.\nCap::TimeProfile is the installed capacity.\nOpex_var::TimeProfile is the variational operational costs per energy unit produced.\nOpex_fixed::TimeProfile is the fixed operational costs.\nInput::Dict{Resource, Real} are the input Resources with conversion value Real.\nOutput::Dict{Resource, Real} are the generated Resources with conversion value Real.\n\nCO2 is required to be included the be available to have CO2 capture applied properly.\n\nEmissions::Dict{ResourceEmit, Real}: emissions per unit produced.\nCO2_capture::Real is the CO2 capture rate.\nData::Array{Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.RefSink","page":"Public","title":"EnergyModelsBase.RefSink","text":"A reference Sink node.\n\nThis node corresponds to a demand given by the field Cap. Process emissions can be included, but if the field is not added, then no process emissions are assumed through the usage of a constructor.\n\nFields\n\nid is the name/identifier of the node.\nCap::TimeProfile is the Demand.\nPenalty::Dict{Any, TimeProfile} are penalties for surplus or deficits.\n\nRequires the fields :Surplus and :Deficit.\n\nInput::Dict{Resource, Real} are the input Resources with conversion value Real.\nEmissions::Dict{ResourceEmit, Real}: emissions per unit produced.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.RefStorage","page":"Public","title":"EnergyModelsBase.RefStorage","text":"A reference Storage node.\n\nThis node is designed to store a ResourceCarrier.\n\nFields\n\nid is the name/identifier of the node.\nRate_cap::TimeProfile is the installed rate capacity, that is e.g. power or mass flow.\nStor_cap::TimeProfile is the installed storage capacity, that is e.g. energy or mass.\nOpex_var::TimeProfile is the variational operational costs per energy unit produced.\nOpex_fixed::TimeProfile is the fixed operational costs.\nStor_res::Resource is the stored Resource.\nInput::Dict{Resource, Real} are the input Resources with conversion value Real.\nOutput::Dict{Resource, Real} are the generated Resources with conversion value Real.\n\nOnly relevant for linking and the stored Resource.\n\nData::Array{Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.RefStorageEmissions","page":"Public","title":"EnergyModelsBase.RefStorageEmissions","text":"A reference Storage node.\n\nThis node is designed to store a ResourceEmit.\n\nFields\n\nid is the name/identifier of the node.\nRate_cap::TimeProfile is the installed rate capacity, that is e.g. power or mass flow.\nStor_cap::TimeProfile is the installed storage capacity, that is e.g. energy or mass.\nOpex_var::TimeProfile is the variational operational costs per energy unit produced.\nOpex_fixed::TimeProfile is the fixed operational costs.\nStor_res::Resource is the stored Resource.\nInput::Dict{Resource, Real} are the input Resources with conversion value Real.\nOutput::Dict{Resource, Real} are the generated Resources with conversion value Real.\n\nOnly relevant for linking and the stored Resource.\n\nData::Array{Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Links","page":"Public","title":"Links","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Linear\nLink\nDirect","category":"page"},{"location":"library/public/#EnergyModelsBase.Linear","page":"Public","title":"EnergyModelsBase.Linear","text":"Linear Link, that is input equals output.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Link","page":"Public","title":"EnergyModelsBase.Link","text":"Declaration of the general type for links connecting nodes.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Direct","page":"Public","title":"EnergyModelsBase.Direct","text":"Direct <: Link\n\nA direct link between two nodes.\n\nFields\n\nid is the name/identifier of the link.\nfrom::Node is node from which there is flow into the link.\nto::Node is node to which there is flow out of the link.\nFormulation::Formulation is the used formulation of links. If not specified,\n\na Linear link is assumed\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Model-and-data","page":"Public","title":"Model and data","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"EnergyModel\nOperationalModel\nData\nEmptyData","category":"page"},{"location":"library/public/#EnergyModelsBase.EnergyModel","page":"Public","title":"EnergyModelsBase.EnergyModel","text":"Abstract type for differentation between types of models (investment, operational, ...).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.OperationalModel","page":"Public","title":"EnergyModelsBase.OperationalModel","text":"Operational Energy Model without investments.\n\nFields\n\nEmission_limit is a dictionary with individual emission limits as TimeProfile for each \n\nemission resource ResourceEmit.\n\nCO2_instance is a ResourceEmit and corresponds to the type used for CO2.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.Data","page":"Public","title":"EnergyModelsBase.Data","text":"Abstract type used to define concrete struct containing the package specific elements  to add to the composite type defined in this package.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsBase.EmptyData","page":"Public","title":"EnergyModelsBase.EmptyData","text":"Empty composite type for Data\n\n\n\n\n\n","category":"type"}]
}
