var documenterSearchIndex = {"docs":
[{"location":"manual/quick-start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Install the most recent version of Julia\nAdd the CleanExport internal Julia registry:\n] registry add git@gitlab.sintef.no:clean_export/registrycleanexport.git\nAdd the SINTEF internal Julia registry:\n] registry add git@gitlab.sintef.no:julia-one-sintef/onesintef.git\nInstall the base package EnergyModelsBase.jl and the time package TimeStruct.jl, and the geography package EnergyModelsGeography.jl by running:\n] add EnergyModelsBase\n] add EnergyModelsGeography\n] add TimeStruct\nThis will fetch the packages from the CleanExport package and OneSINTEF registries.","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Once the package is installed, you can start by using an existing model from EnergyModelsBase. The only change that is needed is to substitute the GenAvailabilty from EnergyModelsBase with GeoAvailabilityfrom EnergyModelsGeography. The GeoAvailability node from this local system is then connected to an RefArea. More areas can be created by repeating this process. Transmission can be added in a system with several areas. Transmission have one From Area one To Area. It also includes an Array of TransmissionModes, which describes how resources are tranported.","category":"page"},{"location":"library/internals/optimization-variables/#optimization_variables","page":"Optimization variables","title":"Optimization variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/#[Area](@ref)","page":"Optimization variables","title":"Area","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttarea_exchangea t p: Keeps track of the amount of resource  p that has been exported from or imported into area a.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The sign convention is as follows: for textttarea_exchangea t p  0, the area imports product p, and for textttarea_exchangea t p  0, the area exports product p.","category":"page"},{"location":"library/internals/optimization-variables/#[TransmissionMode](@ref)","page":"Optimization variables","title":"TransmissionMode","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"note: 'Inheritance' of optimization variables\nNB: Note that for all subtypes of TransmissionMode the variables created for the parent TransmissionMode-type will be created, in addition to the variables created for that type.This means that the type PipeLinepackSimple will not only have access to the optimization variable :linepack_stor_level, but also all the optimization variables created for TransmissionMode.","category":"page"},{"location":"library/internals/optimization-variables/#General","page":"Optimization variables","title":"General","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"All subtypes of TransmissionMode have the following variables available:","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_capm t: Transmission capacity of the transmission mode m,\ntexttttrans_inm t: Transmitted into the transmission mode (powerline/pipeline etc.), given by the from field in the Transmission corridor,\ntexttttrans_outm t: Transmitted out of the transmission mode (powerline/pipeline etc.), given by the to field in the Transmission corridor,\ntexttttrans_lossm t: Transmission loss,","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"The following variables are created in addition, if bidirectional flow is allowed.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_posm t: Transmitted in the positive direction,\ntexttttrans_negm t: Transmitted in the negative direction.","category":"page"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"In addition, texttttrans_inm t and texttttrans_outm t can in this situation be both positive or negative.","category":"page"},{"location":"library/internals/optimization-variables/#Opex-variables","page":"Optimization variables","title":"Opex variables","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"texttttrans_opex_varm t: Variable OPEX for a transmission mode,\ntexttttrans_opex_fixedm t: Fixed OPEX for a transmission mode.","category":"page"},{"location":"library/internals/optimization-variables/#[PipeLinepackSimple](@ref)-:-Pipeline-:-TransmissionMode","page":"Optimization variables","title":"PipeLinepackSimple <: Pipeline <: TransmissionMode","text":"","category":"section"},{"location":"library/internals/optimization-variables/","page":"Optimization variables","title":"Optimization variables","text":"textttlinepack_stor_levelm t: the storage level in the pipeline m at time t.","category":"page"},{"location":"manual/simple-example/#Examples","page":"Example","title":"Examples","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"For the content of the individual examples, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Example","title":"The package is installed with ] add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the Clean Export Julia packages repository. Then run ","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/some/directory/ $ julia           # Starts the Julia REPL\njulia> ]                            # Enter Pkg mode \npkg> add EnergyModelsGeography    # Install the package EnergyModelsGeography to the current environment.","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsGeography\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsGeography), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"sink_source.jl\"))","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"The second example can be run using","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsGeography\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsGeography), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"network.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Example","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the internal Clean Export Julia package registry. The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/../energymodelsgeography.jl/examples $ julia network.jl","category":"page"},{"location":"manual/transmission-mode/#TransmissionModes","page":"TransmissionModes","title":"TransmissionModes","text":"","category":"section"},{"location":"manual/transmission-mode/","page":"TransmissionModes","title":"TransmissionModes","text":"julia> using EnergyModelsGeography\njulia> const EMG = EnergyModelsGeography \njulia> using AbstractTrees\njulia> AbstractTrees.children(x::Type) = subtypes(x)\n\njulia> print_tree(EMG.TransmissionMode)","category":"page"},{"location":"manual/transmission-mode/","page":"TransmissionModes","title":"TransmissionModes","text":"TransmissionMode\n├─ PipeMode\n│  ├─ PipeLinepackSimple\n│  └─ PipeSimple\n├─ RefDynamic\n└─ RefStatic","category":"page"},{"location":"manual/transmission-mode/","page":"TransmissionModes","title":"TransmissionModes","text":"The leaf nodes of the above type hierarchy tree are structs, while the inner vertices are abstract types. The individual nodes and their fields are explained in the public library.","category":"page"},{"location":"library/internals/reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"library/internals/reference/#Index","page":"Reference","title":"Index","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Pages = [\"reference.md\"]","category":"page"},{"location":"library/internals/reference/#lib_interal_ref_types","page":"Reference","title":"Types","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsGeography]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"library/internals/reference/#EnergyModelsGeography.LimitedExchangeArea","page":"Reference","title":"EnergyModelsGeography.LimitedExchangeArea","text":"An Area with limited exchange based on local load.\n\nFields\n\nid is the name/identifier of the area.\nName is the name of the area.\nLon::Real is the longitudinal position of the area.\nLat::Real is the latitudinal position of the area.\nAn::Availability is the Availability node routing different resources within an area.\nExchangeLimit::Dict{EMB.Resource, TimeProfile} is the amount of a resource that can be exchanged with other areas\n\n\n\n\n\n","category":"type"},{"location":"library/internals/reference/#Methods","page":"Reference","title":"Methods","text":"","category":"section"},{"location":"library/internals/reference/","page":"Reference","title":"Reference","text":"Modules = [EnergyModelsGeography]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"library/internals/reference/#EnergyModelsBase.create_node-Tuple{Any, GeoAvailability, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsBase.create_node","text":"EMB.create_node(m, n::GeoAvailability, 𝒯, 𝒫, modeltype::EnergyModel)\n\nRepaces constraints for availability nodes of type GeoAvailability. The resource balances are set by the area constraints instead.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.compute_trans_in-Tuple{Any, Any, Any, PipeMode}","page":"Reference","title":"EnergyModelsGeography.compute_trans_in","text":"compute_trans_in(m, t, p, tm::PipeMode)\n\nReturn the amount of resources going into transmission corridor l by a PipeMode transmission mode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.compute_trans_in-Tuple{Any, Any, Any, TransmissionMode}","page":"Reference","title":"EnergyModelsGeography.compute_trans_in","text":"compute_trans_in(m, t, p, tm::TransmissionMode)\n\nReturn the amount of resources going into transmission corridor l by a generic transmission mode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.compute_trans_out-Tuple{Any, Any, Any, PipeMode}","page":"Reference","title":"EnergyModelsGeography.compute_trans_out","text":"compute_trans_out(m, t, p, tm::PipeMode)\n\nReturn the amount of resources going out of transmission corridor l by a PipeMode transmission mode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.compute_trans_out-Tuple{Any, Any, Any, TransmissionMode}","page":"Reference","title":"EnergyModelsGeography.compute_trans_out","text":"compute_trans_out(m, t, p, tm::TransmissionMode)\n\nReturn the amount of resources going out of transmission corridor l by a generic transmission mode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_area-Tuple{Any, Any, Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.constraints_area","text":"constraints_area(m, 𝒜, 𝒯, ℒᵗʳᵃⁿˢ, 𝒫, modeltype::EnergyModel)\n\nCreate constraints for the energy balances within an area for each resource using the GeoAvailability node. Keep track of the exchange with other areas in a seperate variable :area_exchange.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_capacity-Tuple{Any, PipeLinepackSimple, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_capacity","text":"constraints_capacity(m, tm::PipeLinepackSimple, 𝒯::TimeStructure)\n\nFunction for creating the constraint on the maximum capacity of a PipeLinepackSimple.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_capacity-Tuple{Any, PipeMode, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_capacity","text":"constraints_capacity(m, tm::PipeMode, 𝒯::TimeStructure)\n\nFunction for creating the constraint on the maximum capacity of a generic PipeMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_capacity-Tuple{Any, TransmissionMode, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_capacity","text":"constraints_capacity(m, tm::TransmissionMode, 𝒯::TimeStructure)\n\nFunction for creating the constraint on the maximum capacity of a generic TransmissionMode. This function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_opex_fixed-Tuple{Any, TransmissionMode, Any}","page":"Reference","title":"EnergyModelsGeography.constraints_opex_fixed","text":"constraints_opex_fixed(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)\n\nFunction for creating the constraint on the fixed OPEX of a generic TransmissionMode. This function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_opex_var-Tuple{Any, TransmissionMode, Any}","page":"Reference","title":"EnergyModelsGeography.constraints_opex_var","text":"constraints_opex_var(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)\n\nFunction for creating the constraint on the variable OPEX of a generic TransmissionMode. This function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_trans_balance-Tuple{Any, PipeLinepackSimple, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_trans_balance","text":"constraintstransbalance(m, tm::PipeLinepackSimple, 𝒯::TimeStructure)\n\nFunction for creating the transmission balance for aPipeLinepackSimple.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_trans_balance-Tuple{Any, TransmissionMode, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_trans_balance","text":"constraintstransbalance(m, tm::TransmissionMode, 𝒯::TimeStructure)\n\nFunction for creating the transmission balance for a generic TransmissionMode. This function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_trans_loss-Tuple{Any, PipeMode, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_trans_loss","text":"constraintstransloss(m, tm::PipeMode, 𝒯::TimeStructure)\n\nFunction for creating the constraint on the transmission loss of a generic PipeMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_trans_loss-Tuple{Any, TransmissionMode, TimeStruct.TimeStructure}","page":"Reference","title":"EnergyModelsGeography.constraints_trans_loss","text":"constraintstransloss(m, tm::TransmissionMode, 𝒯::TimeStructure)\n\nFunction for creating the constraint on the transmission loss of a generic TransmissionMode. This function serves as fallback option if no other function is specified for a TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.constraints_transmission-Tuple{Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.constraints_transmission","text":"constraints_transmission(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nCreate transmission constraints on all transmission corridors.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.corridor_modes-Tuple{Transmission}","page":"Reference","title":"EnergyModelsGeography.corridor_modes","text":"corridor_modes(l::Transmission)\n\nReturn an array of the transmission modes for a transmission corridor l.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.corridor_modes-Tuple{Vector{<:Transmission}}","page":"Reference","title":"EnergyModelsGeography.corridor_modes","text":"corridor_modes(ℒ::Vector{::Transmission})\n\nReturn an array fo all transmission modes present in the different transmission corrioders\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.create_area-Tuple{Any, Area, Any, Any, Any}","page":"Reference","title":"EnergyModelsGeography.create_area","text":"create_area(m, a::Area, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nDefault fallback method when no function is defined for a node type.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.create_area-Tuple{Any, EnergyModelsGeography.LimitedExchangeArea, Any, Any, Any}","page":"Reference","title":"EnergyModelsGeography.create_area","text":"create_area(m, a::LimitedExchangeArea, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nConstraint that limit exchange with other areas based on ExchangeLimit.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.create_model-Tuple{Any, Any}","page":"Reference","title":"EnergyModelsGeography.create_model","text":"create_model(case, modeltype::EnergyModel)\n\nCreate the model and call all requried functions based on provided 'modeltype' and case data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.create_transmission_mode-Tuple{Any, TransmissionMode, Any}","page":"Reference","title":"EnergyModelsGeography.create_transmission_mode","text":"create_transmission_mode(m, 𝒯, tm)\n\nSet all constraints for transmission mode. Serves as a fallback option for unspecified subtypes of TransmissionMode.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.exchange_resources-Tuple{Any, Area}","page":"Reference","title":"EnergyModelsGeography.exchange_resources","text":"exchange_resources(ℒ, a::Area)\n\nReturn the resources exchanged (import and export) from area a on the transmission corridors in ℒ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.export_resources-Tuple{Any, Area}","page":"Reference","title":"EnergyModelsGeography.export_resources","text":"export_resources(ℒ, a::Area)\n\nReturn the resources exported from area a on the transmission corridors in ℒ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.filter_transmission_modes-Tuple{Any, Any}","page":"Reference","title":"EnergyModelsGeography.filter_transmission_modes","text":"filter_transmission_modes(ℒ, filter_method)\n\nReturn the resources transported/consumed by the transmission corridors in ℒ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.import_resources-Tuple{Any, Area}","page":"Reference","title":"EnergyModelsGeography.import_resources","text":"import_resources(ℒ, a::Area)\n\nReturn the resources imported into area a on the transmission corridors in ℒ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.mode_sub-Tuple{Transmission, TransmissionMode}","page":"Reference","title":"EnergyModelsGeography.mode_sub","text":"mode_sub(l::Transmission, type::TransmissionMode)\n\nReturn an array containing all TransmissionModes of type type in the Transmission corridor l.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.mode_sub-Tuple{Vector{<:Transmission}, TransmissionMode}","page":"Reference","title":"EnergyModelsGeography.mode_sub","text":"mode_sub(ℒᵗʳᵃⁿˢ::Vector{::Transmission}, type::TransmissionMode)\n\nReturn an array containing all TransmissionModes of type type in the Transmissions ℒ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.modes_of_dir-Tuple{Transmission, Int64}","page":"Reference","title":"EnergyModelsGeography.modes_of_dir","text":"modes_of_dir(l, dir::Int)\n\nReturn the transmission modes of dir directions for transmission corridor l`.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.modes_of_dir-Tuple{Vector{<:TransmissionMode}, Int64}","page":"Reference","title":"EnergyModelsGeography.modes_of_dir","text":"modes_of_dir(ℒ, dir::Int)\n\nReturn the transmission modes of dir directions for transmission modes 𝒞ℳ.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.trans_sub-Tuple{Any, Area}","page":"Reference","title":"EnergyModelsGeography.trans_sub","text":"trans_sub(ℒ, a::Area)\n\nReturn connected transmission corridors for a given area.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.update_objective-Tuple{Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.update_objective","text":"update_objective(m, 𝒩, 𝒯, 𝒫, ℒᵗʳᵃⁿˢ, modeltype::EnergyModel)\n\nUpdate the objective function with costs related to geography (areas and energy transmission).\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_area-Tuple{Any, Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_area","text":"variables_area(m, 𝒜, 𝒯, ℒᵗʳᵃⁿˢ, modeltype::EnergyModel)\n\nCreate variables to track how much energy is exchanged from an area for all  time periods t ∈ 𝒯.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_capacity-NTuple{4, Any}","page":"Reference","title":"EnergyModelsGeography.variables_trans_capacity","text":"variables_trans_capacity(m, 𝒯, ℳ, modeltype)\n\nCreate variables to track how much of installed transmision capacity is used for all  time periods t ∈ 𝒯.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_capex-Tuple{Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_trans_capex","text":"variables_trans_capex(m, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nCreate variables for the capital costs for the investments in transmission. Empty function to allow for multiple dispatch in the EnergyModelsInvestment package.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_mode-Tuple{Any, Any, Vector{<:PipeLinepackSimple}, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_trans_mode","text":"\"     variablestransmode(m, 𝒯, ℳᴸᴾ::Vector{<:PipeLinepackSimple}, modeltype::EnergyModel)\n\nAdds the following special variables for linepacking:\n\n:linepack_flow_in: This is the characteristic throughput of the linepack storage (not of the entire transmission mode)\n:linepack_flow_out: [TBD] this variable is not necessary with current implementation but may be useful for more advanced implementations\n:linepack_stor_level - storage level in linepack\n:linepack_cap_inst - installed storage capacity == cmlp.Linepackcap[t]\n:linepack_rate_inst - installed maximum inflow == cmlp.Linepackrate_cap[t]\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_mode-Tuple{Any, Any, Vector{<:TransmissionMode}, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_trans_mode","text":"\"     variablestransmode(m, 𝒯, ℳˢᵘᵇ::Vector{<:TransmissionMode}, modeltype::EnergyModel)\n\nDefault fallback method when no function is defined for a TransmissionMode type. It introduces the variables that are required in all TransmissionModes. These variables are:\n\n:trans_in - inlet flow to transmission mode\n:trans_out - outlet flow from a transmission mode\n:trans_loss - loss during transmission \n:trans_loss_neg - negative loss during transmission, helper variable if bidirectional\n\ntransport is possible \n\n:trans_loss_pos - positive loss during transmission, helper variable if bidirectional\n\ntransport is possible \n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_modes-Tuple{Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_trans_modes","text":"variables_trans_modes(m, 𝒯, ℳ, modeltype::EnergyModel)\n\nLoop through all TransmissionMode types and create variables specific to each type. This is done by calling the method variables_trans_mode on all modes of each type.\n\nThe TransmissionMode type representing the widest category will be called first. That is,  variables_trans_mode will be called on a TransmissionMode before it is called on PipeMode-nodes.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/reference/#EnergyModelsGeography.variables_trans_opex-Tuple{Any, Any, Any, EnergyModelsBase.EnergyModel}","page":"Reference","title":"EnergyModelsGeography.variables_trans_opex","text":"variables_trans_opex(m, 𝒯, ℒᵗʳᵃⁿˢ, modeltype)\n\nCreate variables for the operational costs for the investments in transmission.\n\n\n\n\n\n","category":"method"},{"location":"manual/philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"This package aims at extending EnergyModelsBase with geographical functionalities. New structures are defined for Area and Transmission corridor. The EnergyModelsBase is used to create a local energy system within an Area, additionally the Area includes geographical coordinates that specifices its location. Transmission corridors defines pathways from one Area to another Area, on these corridor multiple TransmissionModes can be used to transport resources. The TransmissionModes can be static infrastructure such as PipelineMode or dynamic modes such as ships.","category":"page"},{"location":"library/internals/constraint-functions/#constraint_functions","page":"Constraint functions","title":"Constraint functions","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"The package provides standard constraint functions that can be use for new developed nodes. The general approach is similar to EnergyModelsBase. Bidirectional transport requires at the time being the introduciton of an if-loop. In later implementation, it is planned to also use dispatch for this analysis as well.","category":"page"},{"location":"library/internals/constraint-functions/#Capacity-constraints","page":"Constraint functions","title":"Capacity constraints","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_capacity(m, tm::TransmissionMode, 𝒯::TimeStructure)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the capacity usage of a transmission mode tm. It is implemented for both the TransmissionMode, PipeMode and PipeLinepackSimple abstract types. The key difference between the former two is related that PipeMode does not allows for bidirectional transport. PipeLinepackSimple includes in addition the maximum storage capacity for a pipeline when considering linepacking. The implementation is still preliminary and based on a simplified potential for energy storage in a pipeline.","category":"page"},{"location":"library/internals/constraint-functions/#Transmission-loss-functions","page":"Constraint functions","title":"Transmission loss functions","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_trans_loss(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the energy balance of a transmission mode tm. It is implemented for both the TransmissionMode and PipeMode abstract types. The key difference between the two is related that PipeMode does not allows for bidirectional transport. The loss are calculated as relative loss of the transported energy.","category":"page"},{"location":"library/internals/constraint-functions/#Balance-functions","page":"Constraint functions","title":"Balance functions","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_trans_balance(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"correponds to the constraints on the energy balance of a transmission mode tm. It is implemented for both the TransmissionMode and PipeLinepackSimple abstract types. The standard approach  PipeLinePackSimple also includes the overall mass balance for the energy storage within the pipeline.","category":"page"},{"location":"library/internals/constraint-functions/#Operational-cost-constraints","page":"Constraint functions","title":"Operational cost constraints","text":"","category":"section"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_fixed(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the fixed operational costs of a transmission mode tm. There is currently only a single implemented version. It can however be extended, if desirable.","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"constraints_opex_var(m, tm::TransmissionMode, 𝒯ᴵⁿᵛ)","category":"page"},{"location":"library/internals/constraint-functions/","page":"Constraint functions","title":"Constraint functions","text":"corresponds to the constraints calculating the variable operational costs of a transmission mode tm. There is currently only a single implemented version. It can however be extended, if desirable.","category":"page"},{"location":"#EnergyModelsGeography.jl","page":"Home","title":"EnergyModelsGeography.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsGeography","category":"page"},{"location":"#EnergyModelsGeography","page":"Home","title":"EnergyModelsGeography","text":"Main module for EnergyModelsGeography.jl.\n\nExports:\n\nArea, RefArea, GeoAvailability, Transmission, RefStatic, RefDynamic, PipeMode, PipeSimple, PipeLinepackSimple.\n\n\n\n\n\n","category":"module"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides an operational, multi nodal model.","category":"page"},{"location":"","page":"Home","title":"Home","text":"The package extends  EnergyModelsBase.jl with functionality to set up an energy system consisting of several separate regions, with transmissions between.","category":"page"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/philosophy.md\",\n    \"manual/philosophy.md\",\n    \"manual/simple-example.md\"\n]","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals/optimization-variables.md\",\n    \"library/internals/constraint-functions.md\",\n    \"library/internals/reference.md\",\n    ]","category":"page"},{"location":"library/public/#sec_lib_public","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#Area","page":"Public","title":"Area","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"A geographical Area consist of a location and a connection to a local energy system via a specialized Availability node called GeoAvailability. Constraints related to the area keep track of a resource's export and import to the local system and exchange with other areas. Multiple dispatch is used on the Area type for imposing specific constraints. Hence, other restrictions can be applied on a area level, such as electricity generation reserves, CO<sub>2</sub> emission limits or resource limits (wind power, natural gas etc.).","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"Area\nRefArea","category":"page"},{"location":"library/public/#EnergyModelsGeography.Area","page":"Public","title":"EnergyModelsGeography.Area","text":"Declaration of the general type for areas.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.RefArea","page":"Public","title":"EnergyModelsGeography.RefArea","text":"A reference Area.\n\nFields\n\nid is the name/identifier of the area.\nName is the name of the area.\nLon::Real is the longitudinal position of the area.\nLat::Real is the latitudinal position of the area.\nAn::Availability is the Availability node routing different resources within an area.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#Transmission","page":"Public","title":"Transmission","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Transmission occurs on specified transmission corridors From one area To another. On each corridor, there can exist several TransmissionModes that are transporting resources using a range of technologies.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"Transmission","category":"page"},{"location":"library/public/#EnergyModelsGeography.Transmission","page":"Public","title":"EnergyModelsGeography.Transmission","text":"A Transmission corridor.\n\nA geographic corridor where TransmissionModes are used to transport resources.\n\nFields\n\nFrom::Area is the area resources are transported from.\nTo::Area is the area resources are transported to.\nModes::Array{TransmissionMode} is the transmission modes that are available.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#TransmissionMode","page":"Public","title":"TransmissionMode","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"TransmissionMode describes how resources are transported, for example by dynamic transmission modes on ship, truck or railway (represented generically by RefDynamic) or by static transmission modes on overhead power lines or gas pipelines (respresented generically by RefStatic). TransmissionModes includes capacity limits (Trans_cap), losses (Trans_loss) and directions (Directions) for the generic transmission modes RefDynamic and RefStatic. More specialized TransmissionModes such as subtypes of the abstrac type PipeMode can convert one Inlet resource to another Outlet resource.  The PipeMode can be Consuming another resource such as electricity for pumps at a Consumption_rate in order to transport natural gas or hydrogen.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The following TransmissionModes are implemented and exported:","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"TransmissionMode\nRefStatic\nRefDynamic\nPipeMode\nPipeSimple\nPipeLinepackSimple","category":"page"},{"location":"library/public/#EnergyModelsGeography.TransmissionMode","page":"Public","title":"EnergyModelsGeography.TransmissionMode","text":"Declaration of the general type for transmission mode transporting resources between areas.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.RefStatic","page":"Public","title":"EnergyModelsGeography.RefStatic","text":"A reference static TransmissionMode.\n\nGeneric representation of static transmission modes, such as overhead power lines or pipelines.\n\nFields\n\nName::String is the name/identifyer of the transmission mode.\nResource::Resource is the resource that is transported.\nTrans_cap::Real is the capacity of the transmission mode.\nTrans_loss::Real is the loss of the transported resource during transmission, modelled as a ratio.\nOpex_var::TimeProfile is the variational operational costs per energy unit transported.\nOpex_fixed::TimeProfile is the fixed operational costs per installed capacity.\nDirections is the number of directions the resource can be transported, 1 is unidirectional (A->B) or 2 id bidirectional (A<->B).\nData::Dict{String, Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.RefDynamic","page":"Public","title":"EnergyModelsGeography.RefDynamic","text":"A reference dynamic TransmissionMode.\n\nGeneric representation of dynamic transmission modes, using for example truck, ship or railway transport.\n\nFields\n\nName::String is the name/identifyer of the transmission mode.\nResource::Resource is the resource that is transported.\nTrans_cap::TimeProfile is the capacity of the transmission mode.\nTrans_loss::TimeProfile is the loss of the transported resource during transmission, modelled as a ratio.\nOpex_var::TimeProfile is the variational operational costs per energy unit transported.\nOpex_fixed::TimeProfile is the fixed operational costs per installed capacity.\nDirections is the number of directions the resource can be transported, 1 is unidirectional (A->B) or 2 id bidirectional (A<->B).\nData::Dict{String, Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.PipeMode","page":"Public","title":"EnergyModelsGeography.PipeMode","text":"TransmissionMode mode for additional variable potential.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.PipeSimple","page":"Public","title":"EnergyModelsGeography.PipeSimple","text":"This TransmissionMode allows for altering the transported Resource.\n\nA usage of this could e.g. be by defining a subtype struct of Resource with the field  'pressure'. This PipelineMode can then take SomeSubtype<:Resource with pressure p₁ at the  inlet, and pressure p₂ at the outlet.\n\nThis type also supports consuming resources proportionally to the volume of transported  Resource (at the inlet). This could be used for modeling the power needed for operating  the pipeline.\n\nFields\n\nName::String is the identifier used in printed output.\nInlet::Resource is the Resource going into transmission.\nOutlet::Resource is the Resource going out of the outlet of the transmission.\nConsuming::Resource is the Resource the transmission consumes by operating.\nConsumption_rate::Real the rate of which the resource Pipeline.Consuming is consumed, as   a ratio of the volume of the resource going into the inlet. I.e.:\n  `Consumption_rate` = consumed volume / inlet volume (per operational period)\nTrans_cap::Real is the capacity of the transmission mode.\nTrans_loss::Real is the loss of the transported resource during transmission, modelled as a ratio.\nOpex_var::TimeProfile is the variational operational costs per energy unit transported.\nOpex_fixed::TimeProfile is the fixed operational costs per installed capacity.\nDirections specifies that the pipeline is Unidirectional (1) by default.\nData::Dict{String, Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsGeography.PipeLinepackSimple","page":"Public","title":"EnergyModelsGeography.PipeLinepackSimple","text":"PipeLinepackSimple <: TransmissionMode\n\nPipeline model with linepacking implemented as simple storage function.\n\nFields (additional to PipeSimple)\n\nLinepack_energy_share::Flaot64  - is the storage energy capacity relative to pipeline capacity.\nLevel_share_init::Float64  - is the initial storage level. \nData::Dict{String, Data} is the additional data (e.g. for investments).\n\n\n\n\n\n","category":"type"},{"location":"manual/NEWS/#Release-notes","page":"Release notes","title":"Release notes","text":"","category":"section"},{"location":"manual/NEWS/#Version-0.7.1-(2023-06-16)","page":"Release notes","title":"Version 0.7.1 (2023-06-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated the documentation based on the new format","category":"page"},{"location":"manual/NEWS/#Version-0.7.0-(2023-06-06)","page":"Release notes","title":"Version 0.7.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct.jl","page":"Release notes","title":"Switch to TimeStruct.jl","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.jl\nTimeStruct.jl is implemented with only the basis features that were available in TimesStructures.jl. This implies that neither operational nor strategic uncertainty is included in the model.","category":"page"},{"location":"manual/NEWS/#Version-0.6.1-(2023-06-02)","page":"Release notes","title":"Version 0.6.1 (2023-06-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix in linepacking to include multiplication with duration(t) for proper energy accounting","category":"page"},{"location":"manual/NEWS/#Version-0.6.0-(2023-05-30)","page":"Release notes","title":"Version 0.6.0 (2023-05-30)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed the structure in which the extra field Data is included in the nodes\nIt is changed from Dict{String, Data} to Array{data}","category":"page"},{"location":"manual/NEWS/#Version-0.5.2-(2023-05-16)","page":"Release notes","title":"Version 0.5.2 (2023-05-16)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix in the example which lead to a trivial solution in which no energy has to be converted","category":"page"},{"location":"manual/NEWS/#Version-0.5.1-(2023-04-30)","page":"Release notes","title":"Version 0.5.1 (2023-04-30)","text":"","category":"section"},{"location":"manual/NEWS/#Multiple-smaller-updates","page":"Release notes","title":"Multiple smaller updates","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Moved the example in user_interface.jl into an example folder\nIntroduced checks that can be utlized to check transmission related data\nFixed a bug for LimitedExchangeArea that utilized wrong values","category":"page"},{"location":"manual/NEWS/#Version-0.5.0-(2023-04-27)","page":"Release notes","title":"Version 0.5.0 (2023-04-27)","text":"","category":"section"},{"location":"manual/NEWS/#Added-var-and-fixed-opex-for-transmision-modes","page":"Release notes","title":"Added var and fixed opex for transmision modes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"All TransmissionMode are updated to have fields for var and fixed opex.\nVariables trans_opex_var and trans_opex_fixed, also constraints that describes these variables.\nThe function update_objective is updated in src\\model.jl to add var and fixed opex to the objective function.","category":"page"},{"location":"manual/NEWS/#Additional-changes","page":"Release notes","title":"Additional changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Constraints formulations are seperated into functions and moved to src\\constraint_functions.jl, similar to how is is organized in EnergyModelsBase commit [26ad8740].\nCompute functions are moved to seperate file src\\compute_functions.jl.","category":"page"},{"location":"manual/NEWS/#Version-0.4.0-(2023-02-xx)","page":"Release notes","title":"Version 0.4.0 (2023-02-xx)","text":"","category":"section"},{"location":"manual/NEWS/#Change-of-indexing","page":"Release notes","title":"Change of indexing","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Variables are now indexed via the TransmissionMode and the time period instead of the using a SparseAxisArray and indexing via Transmission, time period, and TransmissionMode. This also improves model generation time.\nThis adjustment requires the declaration of a new instance for each usage of a TransmissionMode, see, e.g., the changes in scr\\user_interface.jl.","category":"page"},{"location":"manual/NEWS/#Additional-changes-2","page":"Release notes","title":"Additional changes","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Change of variable generation for individual transmission modes: Variable generation via the function variables_trans_mode(s) is adjusted to follow the concept introduced in EnergyModelsBase  commit c58804ca.\nMove of the field Data from Transmission to TransmissionMode. This is required for the later application of dispatching in EnergyModelsInvestments","category":"page"},{"location":"manual/NEWS/#Version-0.3.1-(2023-02-16)","page":"Release notes","title":"Version 0.3.1 (2023-02-16)","text":"","category":"section"},{"location":"manual/NEWS/#Introduction-of-linepacking","page":"Release notes","title":"Introduction of linepacking","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Redefinition of PipelineMode as abstract type PipeMode and introduction of PipeSimple as a composite type corresponding to the previous PipelineMode\nIntroduction of a simple linepacking implementation via the type `PipeLinepackSimple\nChange of Area to abstract type to be able to dispatch on areas\nRewriting how functions for variable generation are called for easier introduction of variables for different TransmissionModes","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2023-02-02)","page":"Release notes","title":"Version 0.3.0 (2023-02-02)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustmends-to-updates-in-EnergyModelsBase","page":"Release notes","title":"Adjustmends to updates in EnergyModelsBase","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to version 0.3.0, namely:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"The removal of emissions from Node type definition that do not require them in all tests\nRemoval of the type GlobalData and replacement with fields in the type OperationalModel in all tests","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2022-12-12)","page":"Release notes","title":"Version 0.2.2 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Updated Readme\nRenamed with common prefix","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2021-09-07)","page":"Release notes","title":"Version 0.2.1 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview\nIntroduction of bidrectional flow in transmission lines","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2021-08-02)","page":"Release notes","title":"Version 0.2.0 (2021-08-02)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Defined structures for Areas, Transmission corridors and TransmissionModes\nOverloading of the default availability node balance to allow for export and import\nAdded examples of plotting in maps","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-04-19)","page":"Release notes","title":"Version 0.1.0 (2021-04-19)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial (skeleton) version","category":"page"}]
}
