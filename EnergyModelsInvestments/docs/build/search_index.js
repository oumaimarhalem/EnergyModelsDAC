var documenterSearchIndex = {"docs":
[{"location":"manual/simple-example/#Example","page":"Example","title":"Example","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"For the content of the individual examples, see the examples directory in the project repository.","category":"page"},{"location":"manual/simple-example/#The-package-is-installed-with-]-add","page":"Example","title":"The package is installed with ]¬†add","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the Clean Export Julia packages repository. Then run ","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/some/directory/ $ julia           # Starts the Julia REPL\njulia> ]                            # Enter Pkg mode \npkg> add EnergyModelsInvestments    # Install the package EnergyModelsInvestments to the current environment.","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"From the Julia REPL, run","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"# Starts the Julia REPL\njulia> using EnergyModelsInvestments\n# Get the path of the examples directory\njulia> exdir = joinpath(pkgdir(EnergyModelsInvestments), \"examples\")\n# Include the code into the Julia REPL to run the examples\njulia> include(joinpath(exdir, \"sink_source.jl\"))","category":"page"},{"location":"manual/simple-example/#The-code-was-downloaded-with-git-clone","page":"Example","title":"The code was downloaded with git clone","text":"","category":"section"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"First, add the internal Clean Export Julia package registry. The examples can then be run from the terminal with","category":"page"},{"location":"manual/simple-example/","page":"Example","title":"Example","text":"~/.../energymodelsinvestments.jl/examples $ julia sink_source.jl","category":"page"},{"location":"manual/philosophy/#Philosophy","page":"Philosophy","title":"Philosophy","text":"","category":"section"},{"location":"manual/philosophy/","page":"Philosophy","title":"Philosophy","text":"This package aims at extending EnergyModelsBase with investment functionalities. To this end, multiple dispatch is used to redefine certain methods (creation of nodes, model building including objective function,...) and new ones are created. The package is intended to provide as much options as possible to represent investment options. This means defining a wide array of investment modes, lifetime mode and discounting methods. The model is also compatible with EnergyModelsGeography to extend its concept to investment in transmission.","category":"page"},{"location":"library/internals/#Internals","page":"Internals","title":"Internals","text":"","category":"section"},{"location":"library/internals/#Index","page":"Internals","title":"Index","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Pages = [\"internals.md\"]","category":"page"},{"location":"library/internals/#Types","page":"Internals","title":"Types","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Modules = [EnergyModelsInvestments]\nPublic = false\nOrder = [:type]","category":"page"},{"location":"library/internals/#EnergyModelsInvestments.AbstractInvestmentModel","page":"Internals","title":"EnergyModelsInvestments.AbstractInvestmentModel","text":"An abstract investment model type\n\n\n\n\n\n","category":"type"},{"location":"library/internals/#EnergyModelsInvestments.Investment","page":"Internals","title":"EnergyModelsInvestments.Investment","text":"Investment type traits for nodes. \n\n\n\n\n\n","category":"type"},{"location":"library/internals/#EnergyModelsInvestments.SemiContiInvestment","page":"Internals","title":"EnergyModelsInvestments.SemiContiInvestment","text":"Semi-continuous investment, either zero or between a minimum and a maximum value, involves a binary variable. \n\n\n\n\n\n","category":"type"},{"location":"library/internals/#Methods","page":"Internals","title":"Methods","text":"","category":"section"},{"location":"library/internals/","page":"Internals","title":"Internals","text":"Modules = [EnergyModelsInvestments]\nPublic = false\nOrder = [:function]","category":"page"},{"location":"library/internals/#EnergyModelsBase.constraints_capacity_installed-Tuple{Any, EnergyModelsBase.Node, TimeStruct.TimeStructure, EnergyModelsInvestments.AbstractInvestmentModel}","page":"Internals","title":"EnergyModelsBase.constraints_capacity_installed","text":"EMB.constraints_capacity_installed(m, n::EMB.Node, ùíØ, modeltype::AbstractInvestmentModel\n\nSet capacity-related constraints for nodes ùí© for investment time structure ùíØ:\n\nbounds\nbinary for BinaryInvestment\nlink capacity variables\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.constraints_capacity_installed-Tuple{Any, EnergyModelsBase.Storage, TimeStruct.TimeStructure, EnergyModelsInvestments.AbstractInvestmentModel}","page":"Internals","title":"EnergyModelsBase.constraints_capacity_installed","text":"constraints_capacity_installed(m, n::Storage, ùíØ::TimeStructure, modeltype::AbstractInvestmentModel)\n\nSet storage-related constraints for nodes ùí©À¢·µó·µí ≥ for investment time structure ùíØ:\n\nbounds\nbinary for BinaryInvestment\nlink storage variables\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.objective-Tuple{Any, Any, Any, Any, EnergyModelsInvestments.AbstractInvestmentModel}","page":"Internals","title":"EnergyModelsBase.objective","text":"EMB.objective(m, ùí©, ùíØ, modeltype::AbstractInvestmentModel)\n\nCreate objective function overloading the default from EMB for AbstractInvestmentModel.\n\nMaximize Net Present Value from revenues, investments (CAPEX) and operations (OPEX) \n\nTODO:\n\n* consider passing expression around for updating\n\n* consider reading objective and adding terms/coefficients (from model object m)\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsBase.variables_capex-Tuple{Any, Any, Any, Any, EnergyModelsInvestments.AbstractInvestmentModel}","page":"Internals","title":"EnergyModelsBase.variables_capex","text":"EMB.variables_capex(m, ùí©, ùíØ, ùí´, modeltype::AbstractInvestmentModel)\n\nCreate variables for the capital costs for the invesments in storage and  technology nodes.\n\nAdditional variables for investment in capacity:     * :capex_cap - CAPEX costs for a technology     * :cap_invest_b - binary variable whether investments in capacity are happening     * :cap_remove_b - binary variable whether investments in capacity are removed     * :cap_current - installed capacity for storage in each strategic period     * :cap_add - added capacity     * :cap_rem - removed capacity\n\nAdditional variables for investment in storage:     * :capex_stor - CAPEX costs for increases in the capacity of a storage     * :stor_cap_invest_b - binary variable whether investments in capacity are happening     * :stor_cap_remove_b - binary variable whether investments in capacity are removed     * :stor_cap_current - installed capacity for storage in each strategic period     * :stor_cap_add - added capacity     * :stor_cap_rem - removed capacity\n\n* `:capex_rate` - CAPEX costs for increases in the rate of a storage\n* `:stor_rate_invest_b` - binary variable whether investments in rate are happening\n* `:stor_rate_remove_b` - binary variable whether investments in rate are removed\n* `:stor_rate_current` - installed rate for storage in each strategic period\n* `:stor_rate_add` - added rate\n* `:stor_rate_rem` - removed rate\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.check_investment_data-Tuple{Any, Any}","page":"Internals","title":"EnergyModelsInvestments.check_investment_data","text":"check_investment_data(n, ùíØ)\n\nPerforms various checks on investment data:\n\nminadd has to be less than maxadd in investments data (Node.Data).\nExisting capacity can not be larger than max installed capacity in the beginning.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.get_start_cap-Tuple{Any, Any, Any}","page":"Internals","title":"EnergyModelsInvestments.get_start_cap","text":"get_start_cap(n, t, stcap)\n\nReturns the starting capacity of the storage in the first investment period. If no starting capacity is provided in InvestmentData (default = Nothing), then use the provided capacity from the field Cap.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.has_investment-Tuple{EnergyModelsBase.Node}","page":"Internals","title":"EnergyModelsInvestments.has_investment","text":"has_investment(n::EMB.Node)\n\nFor a given Node, checks that it contains the required investment data.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.has_investment-Tuple{Vector{<:EnergyModelsBase.Node}}","page":"Internals","title":"EnergyModelsInvestments.has_investment","text":"has_investment(ùí©::Vector{<:EMB.Node})\n\nFor a given Vector{<:TransmissionMode}, return all TransmissionModes with investments.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.investment_data-Tuple{Any}","page":"Internals","title":"EnergyModelsInvestments.investment_data","text":"investment_data(type)\n\nReturn the investment data of the type type.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.investment_mode-Tuple{Any}","page":"Internals","title":"EnergyModelsInvestments.investment_mode","text":"investment_mode(type)\n\nReturn the investment mode of the type type. By default, all investments are continuous.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.lifetime_mode-Tuple{Any}","page":"Internals","title":"EnergyModelsInvestments.lifetime_mode","text":"lifetime_mode(type)\n\nReturn the lifetime mode of the type type. By default, all investments are unlimited.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.max_add-Tuple{EnergyModelsBase.Node, Any}","page":"Internals","title":"EnergyModelsInvestments.max_add","text":"max_add(n::EMB.Node, t_inv)\n\nReturns the maximum added capacity in the investment period t_inv.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.min_add-Tuple{EnergyModelsBase.Node, Any}","page":"Internals","title":"EnergyModelsInvestments.min_add","text":"min_add(n::EMB.Node, t_inv)\n\nReturns the minimum added capacity in the investment period t_inv.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.set_capacity_cost-NTuple{5, Any}","page":"Internals","title":"EnergyModelsInvestments.set_capacity_cost","text":"set_capacity_cost(m, n, ùíØ, t_inv, modeltype)\n\nSet the capex_cost based on the technology investment cost, and strategic period length to include the needs for reinvestments and the rest value.  It implements different versions of the lifetime implementation:\n\nUnlimitedLife:    The investment life is not limited. The investment costs do not consider any reinvestment or rest value.\nStudyLife:        The investment last for the whole study period with adequate reinvestments at end of lifetime and rest value.\nPeriodLife:       The investment is considered to last only for the strategic period. The excess lifetime is considered in the rest value.\nRollingLife:      The investment is rolling to the next strategic periods and it is retired at the end of its lifetime or the end                    of the previous sp if its lifetime ends between two sp.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.set_capacity_installation-Tuple{Any, Any, Any}","page":"Internals","title":"EnergyModelsInvestments.set_capacity_installation","text":"set_capacity_installation(m, n, ùíØ·¥µ‚Åø·µõ)\n\nAdd constraints related to capacity installation depending on investment mode of node n\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.set_capex_value-Tuple{Any, Any, Any}","page":"Internals","title":"EnergyModelsInvestments.set_capex_value","text":"set_capex_value(years, lifetime, r)\n\nCalculate the discounted values used in the lifetime calculations. The input to the function is given as:     years       Either remaining(tinv, ùíØ) for StudyLife or                 duration(tinv) for  PeriodLife                 the calculation of required investments     lifetime    lifetime of the node     r           Discount rate\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.set_investment_properties-Tuple{Any, Any}","page":"Internals","title":"EnergyModelsInvestments.set_investment_properties","text":"set_investment_properties(n, var)\n\nSet investment properties for variable var for type n, e.g., set to binary for BinaryInvestment, bounds, etc.\n\n\n\n\n\n","category":"method"},{"location":"library/internals/#EnergyModelsInvestments.set_storage_installation-Tuple{Any, Any, Any}","page":"Internals","title":"EnergyModelsInvestments.set_storage_installation","text":"set_storage_installation(m, n, ùíØ·¥µ‚Åø·µõ)\n\nAdd constraints related to storage installation depending on investment mode of node n\n\n\n\n\n\n","category":"method"},{"location":"manual/NEWS/#Release-Notes","page":"Release notes","title":"Release Notes","text":"","category":"section"},{"location":"manual/NEWS/#Version-0.4.0-(2023-06-06)","page":"Release notes","title":"Version 0.4.0 (2023-06-06)","text":"","category":"section"},{"location":"manual/NEWS/#Switch-to-TimeStruct.jl","page":"Release notes","title":"Switch to TimeStruct.jl","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Switched the time structure representation to TimeStruct.jl\nTimeStruct.jl is implemented with only the basis features that were available in TimesStructures.jl. This implies that neither operational nor strategic uncertainty is included in the model","category":"page"},{"location":"manual/NEWS/#Version-0.3.2-(2023-06-01)","page":"Release notes","title":"Version 0.3.2 (2023-06-01)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix related to FixedInvestment","category":"page"},{"location":"manual/NEWS/#Version-0.3.1-(2023-06-01)","page":"Release notes","title":"Version 0.3.1 (2023-06-01)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Added dispatch on EMI.has_investment in the extension instead of defining a new, local function","category":"page"},{"location":"manual/NEWS/#Version-0.3.0-(2023-05-xx)","page":"Release notes","title":"Version 0.3.0 (2023-05-xx)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to changes in EnergyModelsBase v0.4.0 and EnergyModelsGeography v 0.6.0 \nThe new filter method for data can be used as example for subsequent usage of Array{Data}\nMigrate from Requires.jl to support for weak dependencies in julia v1.9.","category":"page"},{"location":"manual/NEWS/#Version-0.2.8-(2023-05-15)","page":"Release notes","title":"Version 0.2.8 (2023-05-15)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Fixed a bug that could lead to method ambiguity errors when a subtype of Storage required additional variables. This solution results in significant changes regarding where and how variables and constraints are declared.","category":"page"},{"location":"manual/NEWS/#Version-0.2.7-(2023-04-27)","page":"Release notes","title":"Version 0.2.7 (2023-04-27)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Requirements changed to ^0.5.0 for EnergyModelsGeography","category":"page"},{"location":"manual/NEWS/#Version-0.2.6-(2023-04-24)","page":"Release notes","title":"Version 0.2.6 (2023-04-24)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Introduction of abstract type InvestmentData as subtype of Data to dispatch specifically on data related to investments\nChanges in the individual utility functions for improved utilization of the multiple dispatch","category":"page"},{"location":"manual/NEWS/#Version-0.2.5-(2023-04-18)","page":"Release notes","title":"Version 0.2.5 (2023-04-18)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Bugfix related to constraint on cap_use,  stor_rate_use, and stor_level:\nThe variables are constrained using the function constraints_capacity and in addition in constraints_capacity_invest and constraints_storage_invest with the latter constraint being inconsistent for Sink nodes.\nThe constraint in EnergyModelsInvestments was therefore removed","category":"page"},{"location":"manual/NEWS/#Version-0.2.4-(2023-03-31)","page":"Release notes","title":"Version 0.2.4 (2023-03-31)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Removal of type ContinuousFixedInvestment as this can be represented with ContinuousInvestment and Cap_max_add limited to a given period\nIntroduction of abstract type SemiContiInvestment and composite type SemiContinuousOffsetInvestment to introduce semi-continuous investments in which the cost function has an offset. This is only included for Transmission in the first step","category":"page"},{"location":"manual/NEWS/#Version-0.2.3-(2023-03-20)","page":"Release notes","title":"Version 0.2.3 (2023-03-20)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustments in tests and functions to changes introduced in EnergyModelsGeography version 0.4.0","category":"page"},{"location":"manual/NEWS/#Version-0.2.2-(2023-02-17)","page":"Release notes","title":"Version 0.2.2 (2023-02-17)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustments in tests and functions to changes introduced in EnergyModelsGeography version 0.3.1","category":"page"},{"location":"manual/NEWS/#Version-0.2.1-(2023-02-06)","page":"Release notes","title":"Version 0.2.1 (2023-02-06)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renaming of investment modes:\nRename DiscreteInvestment to BinaryInvestment\nRename IntegerInvestment to DiscreteInvestment","category":"page"},{"location":"manual/NEWS/#Version-0.2.0-(2023-02-03)","page":"Release notes","title":"Version 0.2.0 (2023-02-03)","text":"","category":"section"},{"location":"manual/NEWS/#Adjustmends-to-updates-in-EnergyModelsBase","page":"Release notes","title":"Adjustmends to updates in EnergyModelsBase","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Adjustment to version 0.3.0, namely:","category":"page"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Changed type (Node) calls in tests to be consistent with version 0.3.0\nChanged call of function for the creation of Storage variables\nRemoval of the type GlobalData and replacement with fields in the type InvestmentModel in all tests","category":"page"},{"location":"manual/NEWS/#Version-0.1.5-(2022-12-12)","page":"Release notes","title":"Version 0.1.5 (2022-12-12)","text":"","category":"section"},{"location":"manual/NEWS/#Internal-release","page":"Release notes","title":"Internal release","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Update Readme","category":"page"},{"location":"manual/NEWS/#Version-0.1.4-(2022-12-09)","page":"Release notes","title":"Version 0.1.4 (2022-12-09)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renamed dictionary keys from EnergyModelsInvestments to Investments","category":"page"},{"location":"manual/NEWS/#Version-0.1.3-(2022-30-11)","page":"Release notes","title":"Version 0.1.3 (2022-30-11)","text":"","category":"section"},{"location":"manual/NEWS/#Renamed-to-EnergyModelsInvestments","page":"Release notes","title":"Renamed to EnergyModelsInvestments","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Renamed for more internally consistent package names","category":"page"},{"location":"manual/NEWS/#Version-0.1.2-(2021-09-07)","page":"Release notes","title":"Version 0.1.2 (2021-09-07)","text":"","category":"section"},{"location":"manual/NEWS/#Changes-in-naming-2","page":"Release notes","title":"Changes in naming","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Major changes in both variable and parameter naming, check the commit message for an overview","category":"page"},{"location":"manual/NEWS/#Version-0.1.1-(2021-08-20)","page":"Release notes","title":"Version 0.1.1 (2021-08-20)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Inclusion for investment in storage (energy)\nChanges to the datastructures","category":"page"},{"location":"manual/NEWS/#Version-0.1.0-(2021-07-06)","page":"Release notes","title":"Version 0.1.0 (2021-07-06)","text":"","category":"section"},{"location":"manual/NEWS/","page":"Release notes","title":"Release notes","text":"Initial version\nInclusion of discounting","category":"page"},{"location":"#EnergyModelsInvestments.jl","page":"Home","title":"EnergyModelsInvestments.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This Julia package provides investments for the operational, multi carrier energy model EnergyModelsBase.jl.","category":"page"},{"location":"","page":"Home","title":"Home","text":"EnergyModelsInvestments","category":"page"},{"location":"#EnergyModelsInvestments","page":"Home","title":"EnergyModelsInvestments","text":"Main module for EnergyModelsInvestments.jl.\n\nThis module implements functionalities allowing to run investment analysis. It also defines weighting and discounting options: objweight, objweightinv, objweightinvend export discountmultavg.\n\n\n\n\n\n","category":"module"},{"location":"#Manual-outline","page":"Home","title":"Manual outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"manual/quick-start.md\",\n    \"manual/philosophy.md\",\n    \"manual/simple-example.md\",\n    \"manual/NEWS.md\"\n]","category":"page"},{"location":"#Library-outline","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Pages = [\n    \"library/public.md\",\n    \"library/internals.md\"\n]","category":"page"},{"location":"library/public/#sec_lib_public","page":"Public","title":"Public interface","text":"","category":"section"},{"location":"library/public/#InvestmentModel","page":"Public","title":"InvestmentModel","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This structure defines a new type of Energy Model than the one available from EnergyModelsBase. This new structure is used when investment needs to be part of the analysis. This struct is a subtype of AbstractInvestmentModel which is itself a subtype of EMB.EnergyModel.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"The structure contains some key information for the model such as the emissions limits and penalties for each ResourceEmit. The discout rate is an important element of investment analysis needed to represent the present value of future cash flows. It is provided to the model as a value between 0 and 1 ( e.g. a discount rate of 5% is 0.05).","category":"page"},{"location":"library/public/#Investment-Types","page":"Public","title":"Investment Types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Different investment types are available to help represent different situations. The investment type is defined in Inv_mode in extra_inv_data and extra_inv_data_storage. The other fields in those struct are used to define the relevant parameters of the different investment types.","category":"page"},{"location":"library/public/#BinaryInvestment","page":"Public","title":"BinaryInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"BinaryInvestment is a type of investment that can either be installed, or not, at the defined capacity. The capacity of the investment cannot be adjusted by the optimization. ","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nThis investment type leads to the addition of binary variables.","category":"page"},{"location":"library/public/#DiscreteInvestment","page":"Public","title":"DiscreteInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"DiscreteInvestment is a type of investment where a technology can be invested in increments of a given size. It can for example be used to represent investment in modular technologies that can be scaled by adding several modules together. The field Cap_increment::TimeProfile from extra_inv_data, or Rate_increment::TimeProfile and Stor_increment::TimeProfile from extra_inv_data_storage should be provided.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nThis investment type leads to the addition of integer variables.","category":"page"},{"location":"library/public/#ContinuousInvestment","page":"Public","title":"ContinuousInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"ContinuousInvestment is a type of investment where the investment in the capacity happens linearly from 0 and up to a given Cap_max_inst::TimeProfile. The rate of installation of the technology can also be limited with Cap_max_add::TimeProfile","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nDefining Cap_min_add::TimeProfile for this type of investment will lead to a forced investment of at least Cap_min_add in each period.","category":"page"},{"location":"library/public/#SemiContinuousInvestment","page":"Public","title":"SemiContinuousInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"SemiContinuousInvestment is a type of investment similar to ContinuousInvestment, but where the investment is either 0 or between a minimum and maximum value. This means you can define Cap_min_add::TimeProfile without forcing investment in the technology.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nThis investment type leads to the addition of binary variables.","category":"page"},{"location":"library/public/#SemiContinuousOffsetInvestment","page":"Public","title":"SemiContinuousOffsetInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"SemiContinuousOffsetInvestment is a type of investment similar to SemiContinuousInvestment and implemented for investments in transmission infrastructure. It does  differ with respect to how the costs are calculated. A SemiContinuousOffsetInvestment has an offset in the cost implemented through the the field Capex_trans_offset. This offset corresponds to the theoretical cost at an invested capacity of 0.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"note: Note\nThis investment type leads to the addition of binary variables.","category":"page"},{"location":"library/public/#FixedInvestment","page":"Public","title":"FixedInvestment","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"FixedInvestment is a type of investment where an investment in the given capacity is forced. It allows to account for the investment cost of known investments.","category":"page"},{"location":"library/public/#LifetimeMode","page":"Public","title":"LifetimeMode","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Several ways to define the lifetime of a technology are available in the package and presented below.","category":"page"},{"location":"library/public/#UnlimitedLife","page":"Public","title":"UnlimitedLife","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This LifetimeMode is used when the lifetime of an asset is not limited. No reinvestment is considered by the optimization and there is also ne salvage value (or rest value) in the last period.","category":"page"},{"location":"library/public/#StudyLife","page":"Public","title":"StudyLife","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This LifetimeMode is used to define that the investment should be available for the whole study period. That means that this technology will be reinvested in at the end of its lifetime, and as many times as necessary to reach the end of the study. A rest value is also calculated for the remaining years at the end of the study period.","category":"page"},{"location":"library/public/#PeriodLife","page":"Public","title":"PeriodLife","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This LifetimeMode is used to define that the investment is only lasting for the strategic period in which it happens. Additional year of lifetime are counted as a rest value. Reinvestment inside the strategic periods are also considered in case the lifetime is shorter than the length of the startegic period.","category":"page"},{"location":"library/public/#RollingLife","page":"Public","title":"RollingLife","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"This LifetimeMode is used to define that the investment rolls over to the next strategic periods as long as the lifetime is not reached. If the remaining lifetime falls between two strategic periods, the investment is not carried to the next period and a rest value is used t oaccount for the remaining lifetime.","category":"page"},{"location":"library/public/#Additional-Data-for-Investments","page":"Public","title":"Additional Data for Investments","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Additional data for investment is specified when creating the nodes. Two struct are used to define the paramters necessary for production technologies (InvData) and storages (InvDataStorage)","category":"page"},{"location":"library/public/#InvData","page":"Public","title":"InvData","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Define the structure for the additional parameters passed to the technology structures defined in other packages. It uses Base.@kwdef to use keyword arguments and default values. The name of the parameters have to be specified.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"!!!note      Depending on the type of investment mode chosen, not all parameters are necessary. It is however possible to set parameters even if they will not be used t obe able to change the investment type more easily.","category":"page"},{"location":"library/public/#InvDataStorage","page":"Public","title":"InvDataStorage","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Define the structure for the additional parameters passed to the technology structures defined in other packages. It uses Base.@kwdef to use keyword  arguments and default values. The name of the parameters have to be specified. The parameters are separated between Rate and Stor. The Rate refers to  instantaneous component (Power, Flow, ...) for instance, charging and discharging power for batteries, while the Stor refers to a volumetric component (Energy, Volume, ...), for instance storage capacity for a battery.","category":"page"},{"location":"library/public/","page":"Public","title":"Public","text":"!!!note      Depending on the type of investment mode chosen, not all parameters are necessary. It is however possible to set parameters even if they will not be used t obe able to change the investment type more easily.","category":"page"},{"location":"library/public/#TransInvData","page":"Public","title":"TransInvData","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Similarly as for InvData, this struct defines additional parameters necessary for handling the investment in transmission between geographical areas. This struct is used in addition to EnergyModelsGeography to add investment in transmission.","category":"page"},{"location":"library/public/#Index","page":"Public","title":"Index","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Pages = [\"public.md\"]","category":"page"},{"location":"library/public/#Types","page":"Public","title":"Types","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [EnergyModelsInvestments]\nPrivate = false\nOrder = [:type]","category":"page"},{"location":"library/public/#EnergyModelsInvestments.BinaryInvestment","page":"Public","title":"EnergyModelsInvestments.BinaryInvestment","text":"Binary investment in given capacity with binary variables. Requires specification of Cap_start in InvData for proper analyses.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.ContinuousInvestment","page":"Public","title":"EnergyModelsInvestments.ContinuousInvestment","text":"Continuous investment between zero and a maximum value. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.DiscreteInvestment","page":"Public","title":"EnergyModelsInvestments.DiscreteInvestment","text":"Investment in fixed increments with integer variables. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.FixedInvestment","page":"Public","title":"EnergyModelsInvestments.FixedInvestment","text":"Forced investment in given capacity. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.InvData","page":"Public","title":"EnergyModelsInvestments.InvData","text":"Extra data for investing in technologies.\n\nDefine the structure for the additional parameters passed to the technology structures defined in other packages. It uses Base.@kwdef to use keyword arguments and default values. The name of the parameters have to be specified.\n\nFields\n\nCapex_Cap::TimeProfile Capital Expenditure for the capacity, here investment costs of \n\nthe technology in each period.\n\nCap_max_inst::TimeProfile Maximum possible installed capacity of the technology in \n\neach period.\n\nCap_max_add::TimeProfile Maximum capacity addition in one period from the previous.\nCap_min_add::TimeProfile Minimum capacity addition in one period from the previous.\nInv_mode::Investment = ContinuousInvestment() Type of the investment:\n\nBinaryInvestment, DiscreteInvestment, ContinuousInvestment, SemiContinuousInvestment,  or FixedInvestment.\n\nCap_start::Union{Real, Nothing} = nothing Starting capacity in first period.\n\nIf nothing is given, it is set by get_start_cap() to the capacity Cap of the node.\n\nCap_increment::TimeProfile = FixedProfile(0) Capacity increment used in the case of\n\nDiscreteInvestment\n\nLife_mode::LifetimeMode = UnlimitedLife() Type of handling of the lifetime:\n\nUnlimitedLife, StudyLife, PeriodLife or RollingLife\n\nLifetime::TimeProfile = FixedProfile(0) Duration/Lifetime of the technology invested\n\nin each period.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.InvDataStorage","page":"Public","title":"EnergyModelsInvestments.InvDataStorage","text":"Extra data for investing in storages.\n\nDefine the structure for the additional parameters passed to the technology structures defined in other packages. It uses Base.@kwdef to use keyword  arguments and default values. The name of the parameters have to be specified. The parameters are separated between Rate and Stor. The Rate refers to  instantaneous component (Power, Flow, ...) for instance, charging and discharging power for batteries, while the Stor refers to a volumetric component (Energy, Volume, ...), for instance storage capacity for a battery.\n\nFields\n\nCapex_rate::TimeProfile Capital Expenditure for storage rate, here investment\n\ncosts of the technology rate in each period.\n\nRate_max_inst::TimeProfile Maximum possible installed rate of the technology in\n\neach period.\n\nRate_max_add::TimeProfile Maximum rate addition in one period from the previous.\nRate_min_add::TimeProfile Minimum rate addition in one period from the previous.\nCapex_stor::TimeProfile Capital Expenditure, here investment costs of the technology \n\nstorage volume in each period.\n\nStor_max_inst::TimeProfile Maximum possible installed storage volume of the technology \n\nin each period.\n\nStor_max_add::TimeProfile Maximum storage volume addition in one period from the \n\nprevious.\n\nStor_min_add::TimeProfile Minimum storage volume addition in one period from the \n\nprevious.\n\nInv_mode::Investment = ContinuousInvestment() Type of the investment:\n\nBinaryInvestment, DiscreteInvestment, ContinuousInvestment, SemiContinuousInvestment  or FixedInvestment.\n\nRate_start::Union{Real, Nothing} = nothing Starting rate in first period. \n\nIf nothing is given, it is set by get_start_cap() to the capacity Rate_cap of the node.\n\nStor_start::Union{Real, Nothing} = nothing Starting storage volume in first period.\n\nIf nothing is given, it is set by get_start_cap() to the capacity Stor_cap of the node.\n\nRate_increment::TimeProfile = FixedProfile(0) Rate increment used in the case of \n\nDiscreteInvestment\n\nStor_increment::TimeProfile = FixedProfile(0) Storage volume increment used in the\n\ncase of DiscreteInvestment\n\nLife_mode::LifetimeMode = UnlimitedLife() Type of handling of the lifetime:\n\nUnlimitedLife, StudyLife, PeriodLife, or RollingLife\n\nLifetime::TimeProfile = FixedProfile(0) Duration/Lifetime of the technology invested\n\nin each period.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.InvestmentData","page":"Public","title":"EnergyModelsInvestments.InvestmentData","text":"Abstract type for the extra data for investing in technologies.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.InvestmentModel","page":"Public","title":"EnergyModelsInvestments.InvestmentModel","text":"An concrete basic investment model type\n\nFields\n\nEmission_limit::Dict{ResourceEmit, TimeProfile} are the emission caps for the different \n\nemissions types considered.\n\nEmission_price::Dict{ResourceEmit, TimeProfile} are the prices for the different \n\nemissions types considered.\n\nCO2_instance is a ResourceEmit and corresponds to the type used for CO2.\nr is the discount rate in the investment optimization.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.LifetimeMode","page":"Public","title":"EnergyModelsInvestments.LifetimeMode","text":"Abstract lifetime type \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.PeriodLife","page":"Public","title":"EnergyModelsInvestments.PeriodLife","text":"The investment is considered to last only for the strategic period. The excess  lifetime is considered in the rest value. If the lifetime is lower than the length  of the period, reinvestment is considered as well. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.RollingLife","page":"Public","title":"EnergyModelsInvestments.RollingLife","text":"The investment is rolling to the next strategic periods and it is retired at the  end of its lifetime or the end of the previous strategic period if its lifetime  ends between two periods.\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.SemiContinuousInvestment","page":"Public","title":"EnergyModelsInvestments.SemiContinuousInvestment","text":"Semi-continuous investment where the cost is going through the origin. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.SemiContinuousOffsetInvestment","page":"Public","title":"EnergyModelsInvestments.SemiContinuousOffsetInvestment","text":"Semi-continuous investment where the cost has an additional offset\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.StudyLife","page":"Public","title":"EnergyModelsInvestments.StudyLife","text":"The investment lasts for the whole study period with adequate reinvestments at the  end of the lifetime and considering the rest value. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.TransInvData","page":"Public","title":"EnergyModelsInvestments.TransInvData","text":"Extra data for investing in transmission.\n\nDefine the structure for the additional parameters passed to the technology structures defined in other packages It uses Base.@kwdef to use keyword arguments and default values. The name of the parameters have to be specified.\n\nFields\n\nCapex_trans::TimeProfile Capital Expenditure for the transmission capacity, here investment costs of the transmission in each period.\nTrans_max_inst::TimeProfile Maximum possible installed transmission capacity in each period.\nTrans_max_add::TimeProfile Maximum transmission capacity addition in one period from the previous.\nTrans_min_add::TimeProfile Minimum transmission capacity addition in one period from the previous.\nInv_mode::Investment = ContinuousInvestment() Type of the investment: BinaryInvestment, DiscreteInvestment, ContinuousInvestment, SemiContinuousInvestment or FixedInvestment.\nTrans_start::Union{Real, Nothing} = nothing Starting transmission capacity in first period. If nothing is given, it is set by getstartcap() to the capacity Trans_Cap of the transmission.\nTrans_increment::TimeProfile = FixedProfile(0) Transmission capacity increment used in the case of DiscreteInvestment\n\n\n\n\n\n","category":"type"},{"location":"library/public/#EnergyModelsInvestments.UnlimitedLife","page":"Public","title":"EnergyModelsInvestments.UnlimitedLife","text":"The investment's life is not limited. The investment costs do not consider any  reinvestment or rest value. \n\n\n\n\n\n","category":"type"},{"location":"library/public/#Methods","page":"Public","title":"Methods","text":"","category":"section"},{"location":"library/public/","page":"Public","title":"Public","text":"Modules = [EnergyModelsInvestments]\nPrivate = false\nOrder = [:function]","category":"page"},{"location":"manual/quick-start/#Quick-Start","page":"Quick Start","title":"Quick Start","text":"","category":"section"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"To start using the package, refer to installation instruction onthe README page from the git repository.  ","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"Once the package is installed, you can start using the package. You can start by using an existing model from EnergyModelsBase and converting it with investments. To achieve this, the model type has to be changed from OperationalModel to InvestmentModel and additional parameters must be provided (emission penalties and a discount rate). New nodes can then be added including investment or investment can be added to existing nodes. To modify an existing node to an investment option, you must provide extra investment data in the field Data of your node. This will take the form of an Arrary entry of InvData or InvDataStorage in case the technology is a storage. You can find information about the different investment parameters that can be provided to InvData in the following documentation.","category":"page"},{"location":"manual/quick-start/","page":"Quick Start","title":"Quick Start","text":"You can check out and run the examples provided to see simple cases including investment in technologies and transmission.","category":"page"}]
}
